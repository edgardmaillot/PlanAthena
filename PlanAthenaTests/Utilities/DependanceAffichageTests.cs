using PlanAthena.Data;
using PlanAthena.Services.Business.DTOs;

namespace PlanAthenaTests.Utilities
{
    /// <summary>
    /// Tests unitaires pour la classe DependanceAffichage et l'enum EtatDependance.
    /// 
    /// COUVERTURE :
    /// - Propri√©t√©s et constructeur
    /// - M√©thode ToString() avec diff√©rents cas
    /// - Enum EtatDependance et ses valeurs
    /// - Cas limites et robustesse
    /// </summary>
    [TestClass]
    public class DependanceAffichageTests
    {
        #region Tests des Propri√©t√©s de Base

        [TestMethod]
        [TestCategory("Unit - Propri√©t√©s")]
        public void DependanceAffichage_ProprietesDeBase_DoiventEtreCorrectementInitialisees()
        {
            // Arrange
            var tache = new Tache { TacheId = "T001", TacheNom = "Test T√¢che" };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Suggeree,
                EstHeritee = true
            };

            // Act & Assert
            Assert.AreEqual(tache, dependance.TachePredecesseur, "TachePredecesseur doit √™tre correctement assign√©e");
            Assert.AreEqual(EtatDependance.Suggeree, dependance.Etat, "Etat doit √™tre correctement assign√©");
            Assert.IsTrue(dependance.EstHeritee, "EstHeritee doit √™tre correctement assign√©e");
        }

        #endregion

        #region Tests de la M√©thode ToString()

        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_AvecTacheValide_DoitRetournerFormatCorrect()
        {
            // Arrange
            var tache = new Tache { TacheId = "T001", TacheNom = "Ma√ßonnerie Bureau" };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Stricte,
                EstHeritee = false
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.AreEqual("‚úÖ Ma√ßonnerie Bureau", resultat,
                "ToString() doit retourner le format 'Ic√¥ne TacheNom' pour √©tat Stricte");
        }

        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_AvecTacheIdNull_DoitGererGracieusement()
        {
            // Arrange
            var tache = new Tache { TacheId = null, TacheNom = "T√¢che sans ID" };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Neutre
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.AreEqual("‚ö™ T√¢che sans ID", resultat,
                "ToString() doit afficher l'ic√¥ne neutre + nom m√™me sans TacheId");
        }

        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_AvecTacheNomNull_DoitGererGracieusement()
        {
            // Arrange
            var tache = new Tache { TacheId = "T001", TacheNom = null };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Neutre
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.AreEqual("‚ö™ ", resultat,
                "ToString() doit afficher l'ic√¥ne m√™me avec TacheNom null");
        }

        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_AvecChainesVides_DoitGererCorrectement()
        {
            // Arrange
            var tache = new Tache { TacheId = "", TacheNom = "" };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Neutre
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.AreEqual("‚ö™ ", resultat,
                "ToString() doit afficher l'ic√¥ne neutre m√™me avec nom vide");
        }

        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_AvecCaracteresSpeciaux_DoitPreserverContenu()
        {
            // Arrange
            var tache = new Tache
            {
                TacheId = "T-001_Sp√©",
                TacheNom = "T√¢che avec acc√©nts & caract√®res sp√©ciaux (test)"
            };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Suggeree
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.AreEqual("üí° T√¢che avec acc√©nts & caract√®res sp√©ciaux (test)", resultat,
                "ToString() doit pr√©server tous les caract√®res sp√©ciaux avec ic√¥ne suggestion");
        }
        [TestMethod]
        [TestCategory("Unit - ToString")]
        public void ToString_PourTousLesEtats_DoitAfficherBonneIcone()
        {
            // Arrange
            var tache = new Tache { TacheId = "T001", TacheNom = "Test" };

            var dependances = new[]
            {
        new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Neutre },
        new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Suggeree },
        new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Stricte },
        new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Exclue }
    };

            // Act & Assert
            Assert.AreEqual("‚ö™ Test", dependances[0].ToString(), "Neutre doit avoir l'ic√¥ne ‚ö™");
            Assert.AreEqual("üí° Test", dependances[1].ToString(), "Sugg√©r√©e doit avoir l'ic√¥ne üí°");
            Assert.AreEqual("‚úÖ Test", dependances[2].ToString(), "Stricte doit avoir l'ic√¥ne ‚úÖ");
            Assert.AreEqual("‚ùå Test", dependances[3].ToString(), "Exclue doit avoir l'ic√¥ne ‚ùå");
        }

        #endregion

        #region Tests de l'Enum EtatDependance

        [TestMethod]
        [TestCategory("Unit - Enum")]
        public void EtatDependance_ValeursPredefinies_DoiventExister()
        {
            // Act & Assert - V√©rification que toutes les valeurs existent
            Assert.IsTrue(Enum.IsDefined(typeof(EtatDependance), EtatDependance.Neutre),
                "EtatDependance.Neutre doit √™tre d√©fini");
            Assert.IsTrue(Enum.IsDefined(typeof(EtatDependance), EtatDependance.Suggeree),
                "EtatDependance.Suggeree doit √™tre d√©fini");
            Assert.IsTrue(Enum.IsDefined(typeof(EtatDependance), EtatDependance.Stricte),
                "EtatDependance.Stricte doit √™tre d√©fini");
            Assert.IsTrue(Enum.IsDefined(typeof(EtatDependance), EtatDependance.Exclue),
                "EtatDependance.Exclue doit √™tre d√©fini");
        }

        [TestMethod]
        [TestCategory("Unit - Enum")]
        public void EtatDependance_ValeursNumeriques_DoiventEtreStables()
        {
            // Act & Assert - V√©rification que les valeurs num√©riques sont stables
            // Important pour la s√©rialisation et la compatibilit√©
            Assert.AreEqual(0, (int)EtatDependance.Neutre, "Neutre doit avoir la valeur 0");
            Assert.AreEqual(1, (int)EtatDependance.Suggeree, "Suggeree doit avoir la valeur 1");
            Assert.AreEqual(2, (int)EtatDependance.Stricte, "Stricte doit avoir la valeur 2");
            Assert.AreEqual(3, (int)EtatDependance.Exclue, "Exclue doit avoir la valeur 3");
        }

        [TestMethod]
        [TestCategory("Unit - Enum")]
        public void EtatDependance_ConversionString_DoitFonctionner()
        {
            // Act & Assert - Test de conversion en cha√Æne
            Assert.AreEqual("Neutre", EtatDependance.Neutre.ToString());
            Assert.AreEqual("Suggeree", EtatDependance.Suggeree.ToString());
            Assert.AreEqual("Stricte", EtatDependance.Stricte.ToString());
            Assert.AreEqual("Exclue", EtatDependance.Exclue.ToString());
        }

        [TestMethod]
        [TestCategory("Unit - Enum")]
        public void EtatDependance_ParseDepuisString_DoitFonctionner()
        {
            // Act & Assert - Test de parsing depuis cha√Æne
            Assert.AreEqual(EtatDependance.Neutre, Enum.Parse<EtatDependance>("Neutre"));
            Assert.AreEqual(EtatDependance.Suggeree, Enum.Parse<EtatDependance>("Suggeree"));
            Assert.AreEqual(EtatDependance.Stricte, Enum.Parse<EtatDependance>("Stricte"));
            Assert.AreEqual(EtatDependance.Exclue, Enum.Parse<EtatDependance>("Exclue"));
        }

        #endregion

        #region Tests de Sc√©narios d'Usage UI

        [TestMethod]
        [TestCategory("Integration - UI")]
        public void DependanceAffichage_PourAffichageUI_DoitFournirInformationsCompletes()
        {
            // Arrange - Simulation d'un objet utilis√© dans TacheDetailForm
            var tache = new Tache
            {
                TacheId = "T001",
                TacheNom = "Ma√ßonnerie",
                MetierId = "MACON_01",
                BlocId = "B001"
            };

            var dependanceStricte = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Stricte,
                EstHeritee = false
            };

            var dependanceSuggeree = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Suggeree,
                EstHeritee = true
            };

            // Act & Assert - V√©rifications pour l'affichage UI

            // Pour d√©pendance stricte (d√©finie manuellement)
            Assert.AreEqual("‚úÖ Ma√ßonnerie", dependanceStricte.ToString(),
                "Affichage avec ic√¥ne ‚úÖ pour CheckedListBox");
            Assert.AreEqual(EtatDependance.Stricte, dependanceStricte.Etat,
                "√âtat pour d√©terminer le style (noir, gras)");
            Assert.IsFalse(dependanceStricte.EstHeritee,
                "Pas h√©rit√©e = d√©finie manuellement");

            // Pour d√©pendance sugg√©r√©e (par r√®gles m√©tier)
            Assert.AreEqual("üí° Ma√ßonnerie", dependanceSuggeree.ToString(),
                "Affichage avec ic√¥ne üí° pour CheckedListBox");
            Assert.AreEqual(EtatDependance.Suggeree, dependanceSuggeree.Etat,
                "√âtat pour d√©terminer le style (bleu, italique)");
            Assert.IsTrue(dependanceSuggeree.EstHeritee,
                "H√©rit√©e = sugg√©r√©e par r√®gles m√©tier");
        }
        [TestMethod]
        [TestCategory("Integration - UI")]
        public void DependanceAffichage_PourLogiqueSauvegarde_DoitDistinguerTypesCorrectement()
        {
            // Arrange - Simulation de la logique SauvegarderModifications() dans TacheDetailForm
            var tache = new Tache { TacheId = "T001", TacheNom = "Test" };

            var dependances = new[]
            {
                new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Stricte, EstHeritee = false },
                new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Suggeree, EstHeritee = true },
                new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Exclue, EstHeritee = true },
                new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Neutre, EstHeritee = false }
            };

            // Assert - V√©rification logique de sauvegarde selon TacheDetailForm
            foreach (var dep in dependances)
            {
                switch (dep.Etat)
                {
                    case EtatDependance.Stricte:
                        // Si coch√©e ET pas h√©rit√©e ‚Üí Dependencies
                        Assert.IsFalse(dep.EstHeritee, "Stricte ne doit pas √™tre h√©rit√©e");
                        // Logique: if (!item.EstHeritee && estCochee) ‚Üí Dependencies
                        break;

                    case EtatDependance.Suggeree:
                        // Si coch√©e ET h√©rit√©e ‚Üí Dependencies (mat√©rialisation)
                        Assert.IsTrue(dep.EstHeritee, "Sugg√©r√©e doit √™tre h√©rit√©e");
                        // Logique: if (item.EstHeritee && estCochee) ‚Üí Dependencies
                        break;

                    case EtatDependance.Exclue:
                        // Si d√©coch√©e ET h√©rit√©e ‚Üí ExclusionsDependances
                        Assert.IsTrue(dep.EstHeritee, "Exclue doit √™tre h√©rit√©e");
                        // Logique: if (item.EstHeritee && !estCochee) ‚Üí ExclusionsDependances
                        break;

                    case EtatDependance.Neutre:
                        // Si coch√©e ET pas h√©rit√©e ‚Üí Dependencies
                        Assert.IsFalse(dep.EstHeritee, "Neutre ne doit pas √™tre h√©rit√©e");
                        // Logique: if (!item.EstHeritee && estCochee) ‚Üí Dependencies
                        break;
                }
            }
        }

        #endregion

        #region Tests de Comparaison et √âgalit√©

        [TestMethod]
        [TestCategory("Unit - √âgalit√©")]
        public void DependanceAffichage_AvecMemeTache_DoitAvoirMemeNom()
        {
            // Arrange
            var tache1 = new Tache { TacheId = "T001", TacheNom = "T√¢che Test" };
            var tache2 = new Tache { TacheId = "T001", TacheNom = "T√¢che Test" };

            var dep1 = new DependanceAffichage { TachePredecesseur = tache1, Etat = EtatDependance.Stricte };
            var dep2 = new DependanceAffichage { TachePredecesseur = tache2, Etat = EtatDependance.Stricte };

            // Act
            var string1 = dep1.ToString();
            var string2 = dep2.ToString();

            // Assert
            Assert.AreEqual(string1, string2,
                "Deux DependanceAffichage avec des t√¢ches identiques ET m√™me √©tat doivent avoir le m√™me ToString()");

            // Test avec √©tats diff√©rents
            var dep3 = new DependanceAffichage { TachePredecesseur = tache1, Etat = EtatDependance.Suggeree };
            Assert.AreNotEqual(dep1.ToString(), dep3.ToString(),
                "M√™me t√¢che mais √©tats diff√©rents doivent avoir des ToString() diff√©rents");
        }

        #endregion

        #region Tests de Performance et Robustesse

        [TestMethod]
        [TestCategory("Unit - Performance")]
        public void ToString_AppelsMultiples_DoitEtrePerformant()
        {
            // Arrange
            var tache = new Tache { TacheId = "T001", TacheNom = "T√¢che de performance" };
            var dependance = new DependanceAffichage { TachePredecesseur = tache, Etat = EtatDependance.Neutre };

            // Act & Assert - 1000 appels doivent √™tre rapides
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            for (int i = 0; i < 1000; i++)
            {
                var result = dependance.ToString();
                Assert.IsNotNull(result, "ToString() ne doit jamais retourner null");
            }

            stopwatch.Stop();
            Assert.IsTrue(stopwatch.ElapsedMilliseconds < 100,
                "1000 appels √† ToString() doivent s'ex√©cuter en moins de 100ms");
        }

        [TestMethod]
        [TestCategory("Unit - Robustesse")]
        public void DependanceAffichage_AvecTacheLongue_DoitGererCorrectement()
        {
            // Arrange - T√¢che avec nom tr√®s long
            var nomTresLong = new string('A', 1000); // 1000 caract√®res
            var tache = new Tache { TacheId = "T_LONG", TacheNom = nomTresLong };
            var dependance = new DependanceAffichage
            {
                TachePredecesseur = tache,
                Etat = EtatDependance.Neutre
            };

            // Act
            var resultat = dependance.ToString();

            // Assert
            Assert.IsTrue(resultat.StartsWith("‚ö™ "), "Doit commencer par l'ic√¥ne neutre");
            Assert.IsTrue(resultat.Contains(nomTresLong), "Le nom long doit √™tre pr√©serv√© int√©gralement");
            Assert.IsTrue(resultat.Length > 1000, "La cha√Æne r√©sultante doit contenir tout le contenu");

            // Note: L'ID n'est plus affich√© dans le nouveau format, donc on ne le teste plus
        }

        #endregion
    }
}