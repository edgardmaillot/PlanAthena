@startuml
title Injection de D√©pendances et Cycles - PlanAthena v0.3.9

skinparam packageStyle rectangle
skinparam linetype ortho

' ================================================
' === SERVICES PRINCIPAUX ===
' ================================================

package "Services Business" {
  class ProjetService {
    Dependencies:
    - OuvrierService
    - Func<TacheService> ‚Üêfactory
    - CsvDataService  
    - Func<BlocService> ‚Üêfactory
    
    Provides:
    ‚Ä¢ M√©tiers (ex-MetierService)
    ‚Ä¢ Lots (ex-LotService)
    ‚Ä¢ Projet complet
  }
  
  class TacheService {
    Dependencies:
    - CsvDataService
    - ExcelReader
    - Func<ProjetService> ‚Üêfactory pour lots
    - Func<BlocService> ‚Üêfactory
    
    Note: Utilise factory pour √©viter
    cycle avec ProjetService
  }
  
  class BlocService {
    Dependencies:
    - Func<TacheService> ‚Üêfactory
    
    Note: Utilise factory pour √©viter
    cycle avec TacheService
  }
  
  class OuvrierService {
    Dependencies: AUCUNE
    
    Note: Service "feuille"
    sans d√©pendance
  }
}

package "Services Data/Processing" {
  class ImportService {
    Dependencies:
    - TacheService
    - ProjetService ‚Üêpour lots
    - BlocService
    - IdGeneratorService
  }
  
  class IdGeneratorService {
    Dependencies:
    - ProjetService ‚Üêpour lots
    - BlocService
    - TacheService
  }
  
  class DataTransformer {
    Dependencies:
    - ProjetService ‚Üêpour lots
  }
  
  class DependanceBuilder {
    Dependencies:
    - ProjetService ‚Üêpour lots
  }
}

package "Services Infrastructure" {
  class CsvDataService {
    Dependencies: AUCUNE
    Note: Service "feuille"
  }
  
  class ExcelReader {
    Dependencies: AUCUNE  
    Note: Service "feuille"
  }
  
  class PlanificationService {
    Dependencies:
    - DataTransformer
    - PreparationSolveurService
    - ResultatConsolidationService
    - PlanAthenaCoreFacade
  }
}

' ================================================
' === FACTORY PATTERN ===
' ================================================

note as FactoryNote
<b>üîÑ FACTORY PATTERN pour √©viter les cycles</b>

<b>Probl√®me r√©solu :</b>
TacheService ‚Üê‚Üí ProjetService (cycle direct)
BlocService ‚Üê‚Üí TacheService (cycle direct)

<b>Solution :</b>
‚Ä¢ TacheService ‚Üí Func<ProjetService>
‚Ä¢ BlocService ‚Üí Func<TacheService>  
‚Ä¢ ProjetService ‚Üí Func<TacheService>, Func<BlocService>

<b>Usage :</b>
var lot = _projetServiceFactory().ObtenirLotParId(id);
end note

' ================================================
' === ORDRE D'INJECTION (MainForm.ConfigureServices) ===
' ================================================

note as InjectionOrder
<b>üìã ORDRE D'INJECTION dans MainForm</b>

<b>1. Services feuilles :</b>
‚Ä¢ CsvDataService (Singleton)
‚Ä¢ ExcelReader (Singleton)  
‚Ä¢ OuvrierService (Singleton)

<b>2. Factories :</b>
‚Ä¢ Func<TacheService>
‚Ä¢ Func<ProjetService>
‚Ä¢ Func<BlocService>

<b>3. Services avec factories :</b>
‚Ä¢ BlocService(Func<TacheService>)
‚Ä¢ TacheService(CsvData, Excel, Func<ProjetService>, Func<BlocService>)
‚Ä¢ ProjetService(Ouvrier, Func<TacheService>, CsvData, Func<BlocService>)

<b>4. Services d√©pendants :</b>
‚Ä¢ IdGeneratorService
‚Ä¢ DataTransformer, etc.
end note

' ================================================
' === RELATIONS ===
' ================================================

' D√©pendances directes
ProjetService --> OuvrierService
ProjetService --> CsvDataService
ImportService --> TacheService
ImportService --> BlocService
ImportService --> IdGeneratorService
IdGeneratorService --> BlocService
IdGeneratorService --> TacheService
PlanificationService --> DataTransformer

' Factory dependencies (pointill√©s)
TacheService ..> ProjetService : "Func<ProjetService>\npour lots"
BlocService ..> TacheService : "Func<TacheService>\n√©viter cycle"
ProjetService ..> TacheService : "Func<TacheService>\n√©viter cycle"
ProjetService ..> BlocService : "Func<BlocService>\n√©viter cycle"

' Nouvelles d√©pendances post-fusion LotService
ImportService --> ProjetService : "lots (ex-LotService)"
DataTransformer --> ProjetService : "lots (ex-LotService)" 
DependanceBuilder --> ProjetService : "lots (ex-LotService)"
IdGeneratorService --> ProjetService : "lots (ex-LotService)"

' ================================================
' === IMPACT DE LA FUSION ===
' ================================================

note as FusionImpact
<b>üìä IMPACT FUSION LotService ‚Üí ProjetService</b>

<b>Services modifi√©s (12 fichiers, 48 r√©f√©rences) :</b>
‚úÖ TacheService : Func<ProjetService> pour lots
‚úÖ ImportService : ProjetService au lieu de LotService
‚úÖ DataTransformer : ProjetService pour lots
‚úÖ IdGeneratorService : ProjetService pour lots
‚úÖ DependanceBuilder : ProjetService pour lots
‚úÖ LotForm : ProjetService au lieu de LotService
‚úÖ TacheForm : ProjetService pour lots
‚úÖ PertDiagramControl : ProjetService pour lots
‚úÖ MainForm : Suppression LotService de l'injection

<b>B√©n√©fices :</b>
‚Ä¢ Architecture simplifi√©e (-1 service)
‚Ä¢ Coh√©rence m√©tier (projet = m√©tiers + lots)
‚Ä¢ Maintenance r√©duite
‚Ä¢ Documentation centralis√©e
end note

FactoryNote --> TacheService
InjectionOrder --> ProjetService
FusionImpact --> ImportService

@enduml