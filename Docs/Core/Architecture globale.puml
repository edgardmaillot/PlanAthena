@startuml
' --- Configuration ---
skinparam componentStyle uml2
skinparam linetype ortho
skinparam ranksep 80
skinparam nodesep 100

title Architecture Globale de PlanAthena.core v1.1\n<size:12><i>Avec couches de validation renforcées</i></size>

package "Facade" <<Layer>> {
  class PlanAthenaCoreFacade {
    + ProcessChantierAsync(...)
  }
}
note left: Point d'entrée unique\npour les clients de la DLL.

package "Application" <<Layer>> {
    package "UseCases" {
        class ProcessChantierUseCase {
          + ExecuteAsync(...)
          + ValiderEtCreerChantierAsync(...)
          + InterpretarResultatSolveur(...)
        }
    }
    
    package "Interfaces" {
        interface IProcessChantierUseCase
        interface IChantierSetupInputMapper
        interface IConstructeurProblemeOrTools
        interface ISolutionInterpreterService
        interface IChantierValidationService
        interface ICapacityValidationService
        interface ICrossReferenceValidationService
        interface IInitialFeasibilityAnalysisService
    }
    
    package "Services" {
        class ChantierSetupInputMapper
        class ChantierValidationService {
          + ValiderChantierCompletAsync(...)
          - ValidateTaskCycles(...)
        }
        class InitialFeasibilityAnalysisService {
          + AnalyserFaisabiliteAsync(...)
        }
        class CapacityValidationService {
          + ValidateCapacityConstraintsAsync(...)
          - ValidateGlobalWorkload(...)
          - ValidateBlocCapacities(...)
          - ValidateSkillConstraints(...)
        }
        class CrossReferenceValidationService {
          + ValidateCrossReferencesAsync(...)
        }
    }
    
    package "Validation" {
        class ChantierSetupInputDtoValidator
        class OptimizationConfigDtoValidator
        class TacheDtoValidator
        class OuvrierDtoValidator
    }
}
note top: Orchestre les actions.\nValidation en 6 couches.\nDéfinit les contrats entre couches.

package "Domain" <<Layer>> {
    class Chantier {
      + ObtenirToutesLesTaches()
      + AppliquerConfigurationOptimisation(...)
    }
    class Tache {
      + Type: TypeActivite
      + Dependencies: IReadOnlySet<TacheId>
    }
    class Ouvrier {
      + Nom: string
      + Competences: IReadOnlyDictionary<...>
    }
    class BlocTravail {
      + CapaciteMaxOuvriers: int
    }
    class "ValueObjects" as VOs {
      + TacheId
      + MetierId
      + DureeHeuresHomme
    }
    class DependencyGraph {
      + DetectCycles(): IReadOnlyList<...>
    }
}
note bottom: Le cœur du métier.\nContient la logique et les\nrègles métier pures.\nNe dépend de rien.

package "Infrastructure" <<Layer>> {
    package "Services.OrTools" {
        class ConstructeurProblemeOrTools
        class SolutionInterpreterService
    }
    package "Services" {
        class CalendrierService
    }
}
note right: Implémentations techniques.\nCommunication avec OR-Tools.\nDépend des interfaces Application.

package "Bibliothèques Externes" {
    class "Google.OrTools.Sat" as OrTools
    class "FluentValidation" as FluentVal
}



' --- Dépendances principales ---
PlanAthenaCoreFacade --> IProcessChantierUseCase

ProcessChantierUseCase --> IChantierSetupInputMapper
ProcessChantierUseCase --> IChantierValidationService
ProcessChantierUseCase --> ICapacityValidationService
ProcessChantierUseCase --> ICrossReferenceValidationService
ProcessChantierUseCase --> IInitialFeasibilityAnalysisService
ProcessChantierUseCase --> IConstructeurProblemeOrTools
ProcessChantierUseCase --> ISolutionInterpreterService

' --- Implémentations ---
ChantierSetupInputMapper --|> IChantierSetupInputMapper
ChantierValidationService --|> IChantierValidationService
CapacityValidationService --|> ICapacityValidationService
CrossReferenceValidationService --|> ICrossReferenceValidationService
InitialFeasibilityAnalysisService --|> IInitialFeasibilityAnalysisService

ChantierSetupInputDtoValidator --|> FluentVal.AbstractValidator
CapacityValidationService ..> Chantier : "<<filtre ouvriers virtuels>>"
ChantierValidationService ..> DependencyGraph : "<<utilise>>"

ConstructeurProblemeOrTools --|> IConstructeurProblemeOrTools
SolutionInterpreterService --|> ISolutionInterpreterService
CalendrierService --|> ICalendrierService

' --- Relations vers le domaine ---
Application ..> Domain : "<<manipule>>"
Infrastructure ..> Domain : "<<utilise>>"
Infrastructure ..> OrTools : "<<dépend>>"


@enduml