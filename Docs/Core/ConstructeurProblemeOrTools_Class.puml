@startuml
' --- Configuration ---
skinparam componentStyle uml2
skinparam linetype ortho
skinparam ranksep 60
skinparam nodesep 90

title Diagramme de Classe : Construction du Modèle de Résolution (CORRIGÉ v2)

package "Infrastructure.Services.OrTools" {
    class ConstructeurProblemeOrTools implements IConstructeurProblemeOrTools {
        + ConstruireModele(probleme, objectif): ModeleCpSat
    }

    class TacheModelBuilder {
        + Construire(model, probleme): (intervals, assignables, makespan, ...)
        -- private --
        - CreerVariablesDeDecision(...)
        - AjouterContraintesAssignationUnique(...)
        - AjouterContraintesRessources(...)
        - AjouterContraintesDePrecedence(...)
        - AjouterContraintesDePrecedenceParPriorite(...)
        - CreerPontTemporel(...)
        - CalculerBorneSuperieureMakespan(...)
        - ConvertirHeureAbsolueEnSlot(...) // NOUVEAU
        -- Champs privés --
        - _jalonStartAbsolu: Dictionary<TacheId, IntVar>
        - _jalonEndAbsolu: Dictionary<TacheId, IntVar>
        - _dureesOriginales: Dictionary<TacheId, double>
        - _typesActivites: Dictionary<TacheId, TypeActivite>
        - _nomsActivites: Dictionary<TacheId, string>
        - _lotStarts: Dictionary<LotId, IntVar>
        - _lotEnds: Dictionary<LotId, IntVar>
        - _priorityGroupStarts: Dictionary<int, IntVar>
        - _priorityGroupEnds: Dictionary<int, IntVar>
        - _mapSlotToHeureAbsolue: long[] // NOUVEAU
    }
    note right of TacheModelBuilder
      **ÉTENDU** :
      • Gère deux systèmes temporels :
        - Slots (calendrier ouvré) pour tâches
        - Heures absolues (24h/24) pour jalons
      • Contraintes de précédence entre lots
      • Variables agrégées par lot et priorité
      
      **PROBLÈME RÉSOLU** ✅ :
      Jalons d'attente en fin de lot maintenant
      correctement pris en compte dans les
      contraintes inter-lots via conversion
      heures absolues → slots équivalents
    end note

    class CoutModelBuilder {
        + Construire(model, probleme, ...): (coutTotal, coutRh, coutIndirect)
        -- private --
        - CalculerCoutsOuvriers(...)
        - ConstruireCoutsIndirects(...)
        - PreparerCachesTemporels(...)
    }
    note right of CoutModelBuilder
      Construit les variables de coût.
      Définit l'objectif économique
      du modèle (coût RH, coût indirect).
      **INCHANGÉ**
    end note
}

package "Application.InternalDto" {
    class ProblemeOptimisation {
      + Chantier
      + EchelleTemps
      + Configuration
    }
    class ModeleCpSat {
      + Model: CpModel
      + TachesIntervals: Dictionary<TacheId, IntervalVar>
      + TachesAssignables: Dictionary<(TacheId, OuvrierId), BoolVar>
      + Makespan: IntVar
      + CoutTotal: IntVar
      + CoutRh: IntVar
      + CoutIndirect: IntVar
      -- **AJOUTS pour métadonnées** --
      + DureesOriginalesHeures: Dictionary<TacheId, double>
      + TypesActivites: Dictionary<TacheId, TypeActivite>
      + NomsActivites: Dictionary<TacheId, string>
      -- **AJOUTS pour contraintes de lots** --
      + LotStarts: Dictionary<LotId, IntVar>
      + LotEnds: Dictionary<LotId, IntVar>
      + PriorityGroupStarts: Dictionary<int, IntVar>
      + PriorityGroupEnds: Dictionary<int, IntVar>
    }
    note bottom of ModeleCpSat
      **ÉTENDU** pour supporter :
      • Métadonnées des jalons
      • Variables agrégées des lots
      • Interprétation correcte des solutions
      ✅ Fins de lot incluent les vraies fins des jalons
    end note
}

package "Google.OrTools.Sat" <<Librairie Externe>> {
    class CpModel
    class IntVar
    class BoolVar
    class IntervalVar
}

' --- Relations ---
ConstructeurProblemeOrTools ..> TacheModelBuilder : "<<uses>>"
ConstructeurProblemeOrTools ..> CoutModelBuilder : "<<uses>>"

ConstructeurProblemeOrTools ..> ProblemeOptimisation : "<<reads>>"
ConstructeurProblemeOrTools ..> ModeleCpSat : "<<creates>>"

TacheModelBuilder ..> ProblemeOptimisation : "<<reads>>"
TacheModelBuilder ..> CpModel : "<<modifies>>"
CoutModelBuilder ..> ProblemeOptimisation : "<<reads>>"
CoutBuilder ..> CpModel : "<<modifies>>"

@enduml