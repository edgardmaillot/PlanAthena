@startuml
title Architecture PlanAthena - Post Fusion LotService (v0.3.9)

!define DIRECTION top to bottom direction
top to bottom direction
skinparam packageStyle rectangle
skinparam linetype ortho

skinparam package {
  borderColor #555555
  borderThickness 2
  fontColor #333333
  backgroundColor #F8F9FA
}

skinparam class {
  borderColor #007ACC
  backgroundColor #DDEEFF
  arrowColor #005588
}

' ================================================
' === COUCHE IHM ===
' ================================================
package "üñ•Ô∏è Interface Utilisateur" as UI {
  
  package "Gestion de Projet" {
    class MainForm
    class NouveauProjetDialog
  }
  
  package "Qualification des T√¢ches" {
    class TacheForm
    class TacheDetailForm
    class ImportTacheForm
    class ImportCsvGroupeDialog
    class ImportWarningsDialog
  }
  
  package "Configuration Ressources" {
    class OuvrierForm
    class MetierForm
    class LotForm
    class BlocForm
    class CompetenceDialog
    class SelectionMetierDialog
  }
  
  package "Visualisation" {
    class PertDiagramControl
    class MetierDiagramControl
  }
}

' ================================================
' === COUCHE M√âTIER ===
' ================================================
package "‚öôÔ∏è Services M√©tier" as BUSINESS {
  
  class ProjetService {
    == Gestion Projet ==
    +CreerNouveauProjet()
    +SauvegarderProjet()
    +ChargerProjet()
    +ObtenirResumeProjet()
    +ValiderDonneesAvantPlanification()
    
    == Gestion M√©tiers ==
    +AjouterMetier()
    +ModifierMetier()
    +SupprimerMetier()
    +GetAllMetiers()
    +ObtenirMetiersTriesParDependance()
    
    == Gestion Lots (Fusionn√© de LotService) ==
    +AjouterLot()
    +ModifierLot()
    +ObtenirLotParId()
    +ObtenirTousLesLots()
    +SupprimerLot()
    +RemplacerTousLesLots()
    +ViderLots()
  }
  
  class TacheService {
    == Qualification T√¢ches ==
    +AjouterTache()
    +ModifierTache()
    +SupprimerTache()
    +ObtenirTachesParLot()
    +ObtenirStatistiques()
    
    == Gestion Blocs (Contraintes) ==
    +AjouterBloc()
    +ModifierBloc()
    +ObtenirTousLesBlocs()
    +SupprimerBloc()
    +ValiderDependancesIntraBloc()
    +CalculerCapaciteOuvriers()
    
    == Import/Export ==
    +ImporterTachesCSV()
    +ExporterTaches()
    
    --Dependencies--
    -_projetServiceFactory: Func<ProjetService>
  }
  
  class OuvrierService {
    == Gestion Ressources ==
    +AjouterOuvrier()
    +ModifierOuvrier()
    +SupprimerOuvrier()
    +ObtenirTousLesOuvriers()
    +GererCompetences()
  }
  
  class BlocService {
    == Gestion Contraintes ==
    +AjouterBloc()
    +ModifierBloc()
    +SupprimerBloc()
    +ObtenirTousLesBlocs()
    +ValiderDependancesIntraBloc()
    
    --Dependencies--
    -_tacheServiceFactory: Func<TacheService>
  }
  
  class PlanificationService {
    == Planification Optimale ==
    +LancerPlanificationAsync()
    +ObtenirStatistiquesTraitement()
    +ChargerDonnees()
    
    == Pr√©paration Solveur ==
    +PreparerPourSolveur()
    +TransformToChantierSetupDto()
    
    == Consolidation R√©sultats ==
    +ConsoliderPourGantt()
    +ExporterVersGantt()
  }
  
  class ImportOrchestrationService {
    == Import Orchestr√© ==
    +ImporterTachesDepuisCsv()
    +ValiderStructureFichier()
    +GererMappingConfiguration()
    
    --Dependencies--
    -_projetService: ProjetService
  }
}

' ================================================
' === COUCHE DATA ===
' ================================================
package "üóÑÔ∏è Acc√®s aux Donn√©es" as DATA {
  
  package "Entit√©s M√©tier" {
    class ProjetData {
      +Taches: List<Tache>
      +Lots: List<Lot>
      +Blocs: List<Bloc>
      +Metiers: List<Metier>
      +Ouvriers: List<Ouvrier>
    }
    
    class Tache {
      +TacheId: string
      +IdImporte: string
      +TacheNom: string
      +HeuresHommeEstimees: int
      +MetierId: string
      +Dependencies: string
      +ExclusionsDependances: string
      +Type: TypeActivite
      +EstJalon: bool (computed)
      +LotId: string
      +BlocId: string
    }
    
    enum TypeActivite {
      Tache
      JalonUtilisateur
      JalonDeSynchronisation
      JalonTechnique
    }
    
    class Lot {
      +LotId: string
      +Nom: string
      +Priorite: int
      +CheminFichierPlan: string
      +Phases: ChantierPhase
    }
    
    class Bloc {
      +BlocId: string
      +Nom: string
      +CapaciteMaxOuvriers: int
    }
    
    class Metier {
      +MetierId: string
      +Nom: string
      +PrerequisMetierIds: string
      +CouleurHex: string
      +Pictogram: string
      +Phases: ChantierPhase
    }
    
    class Ouvrier {
      +OuvrierId: string
      +Nom: string
      +Prenom: string
      +CoutJournalier: int
      +MetierId: string
      +NiveauExpertise: NiveauExpertise
      +PerformancePct: int?
    }
    
    enum ChantierPhase {
      None
      GrosOeuvre
      SecondOeuvre
      Finition
      GarantieDecennale
    }
    
    enum NiveauExpertise {
      Debutant
      Confirme
      Expert
    }
  }
  
  package "Services Data" {
    class CsvDataService {
      +ImportCsv()
      +ExportCsv()
      +ValidateCsvStructure()
    }
    
    class ExcelReader {
      +ImportExcel()
      +ImportSapOuvriers()
      +ImportFieldwireTaches()
    }
    
    class GanttExportService {
      +ExporterVersGanttProjectXml()
      +GenererXmlGanttProjectConsolide()
    }
    
    class IdGeneratorService {
      +GenererProchainId()
      +ValiderFormatId()
      
      --Dependencies--
      -_projetService: ProjetService
    }
    
    class ImportService {
      +ImporterTachesDepuisCsv()
      +ValiderStructureFichier()
      
      --Dependencies--
      -_projetService: ProjetService
    }
  }
  
  package "Configuration & Helpers" {
    class ImportMappingConfiguration
    class DependanceBuilder {
      --Dependencies--
      -_projetService: ProjetService
    }
    class ConfigurationBuilder
  }
  
  package "Processing" {
    class DataTransformer {
      --Dependencies--
      -_projetService: ProjetService
    }
    class PreparationSolveurService
    class ResultatConsolidationService
  }
}

' ================================================
' === EXTERNE ===
' ================================================
package "üåç Syst√®mes Externes" as EXTERNAL {
  class PlanAthenaCoreFacade {
    +ProcessChantier()
    +OptimiserPlanification()
  }
  
  class "Biblioth√®ques" as LIBS {
    +QuikGraph (Graphes)
    +CsvHelper (CSV)
    +Microsoft.Msagl (Diagrammes)
    +System.Text.Json (JSON)
  }
}

' ================================================
' === RELATIONS PRINCIPALES ===
' ================================================

' UI vers Business
UI -down-> BUSINESS : "Utilise"

' Business vers Data
BUSINESS -down-> DATA : "Persiste"

' Data vers External
DATA -down-> EXTERNAL : "Int√®gre"

' Relations d√©taill√©es principales
ProjetService -down-> ProjetData
TacheService -down-> Tache
OuvrierService -down-> Ouvrier
PlanificationService -down-> PlanAthenaCoreFacade

MainForm -down-> ProjetService
TacheForm -down-> TacheService
LotForm -down-> ProjetService : "Utilise pour lots"
OuvrierForm -down-> OuvrierService
PlanificationService -right-> TacheService : "Charge donn√©es"
ImportOrchestrationService -down-> CsvDataService

' Relations Factory (√©viter cycles)
TacheService ..> ProjetService : "Func<ProjetService>\n(pour lots)"
BlocService ..> TacheService : "Func<TacheService>\n(√©viter cycle)"

' Nouvelles relations post-fusion
ImportService -up-> ProjetService : "lots"
DependanceBuilder -up-> ProjetService : "lots"
DataTransformer -up-> ProjetService : "lots"
IdGeneratorService -up-> ProjetService : "lots"

' ================================================
' === NOTES M√âTIER ===
' ================================================

note top of BUSINESS
<b>ARCHITECTURE POST-FUSION LotService</b>
‚úÖ LotService fusionn√© dans ProjetService
‚úÖ Cycles √©vit√©s via Func<T> factories
‚úÖ 48 r√©f√©rences mises √† jour dans 12 fichiers
end note

note right of ProjetService
<b>Service Unifi√© Projet + Lots</b>
G√®re maintenant :
‚Ä¢ M√©tiers (ex-MetierService)
‚Ä¢ Lots (ex-LotService)  
‚Ä¢ Projets (fonctions originales)
‚Ä¢ Sauvegarde/chargement complet
end note

note right of TacheService
<b>Factory pour √©viter cycle</b>
Utilise Func<ProjetService> pour
acc√©der aux lots sans cr√©er de
d√©pendance circulaire directe.
_projetServiceFactory().ObtenirLotParId()
end note

note left of ImportService
<b>Services simplifi√©s</b>
Plus besoin d'injecter s√©par√©ment
ProjetService ET LotService.
Un seul ProjetService suffit.
end note

note bottom of DATA
<b>Impact de la fusion :</b>
‚Ä¢ IdGeneratorService : ProjetService pour lots
‚Ä¢ ImportService : ProjetService pour lots  
‚Ä¢ DataTransformer : ProjetService pour lots
‚Ä¢ DependanceBuilder : ProjetService pour lots
‚Ä¢ Tous utilisent le m√™me service unifi√©
end note

@enduml