@startuml
' --- Configuration ---

skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam shadowing false
title Diagramme de Classe : PlanificationOrchestrator et ses Interactions
package "DTOs" {
class ConfigurationPlanification
class "PlanificationRunResult" as RunResult {
RawResult: ProcessChantierResultDto
AnalysisReport: AnalysisReport?
MetierTensionReport: MetierTensionReport?
}
class ProcessChantierResultDto
class AnalysisReport
class MetierTensionReport
}
package "Use Cases" {
class PlanificationOrchestrator {
' --- Dépendances Injectées ---
_projetService: ProjetService
_ressourceService: RessourceService
_preparationService: PreparationSolveurService
_transformerService: DataTransformer
_facade: PlanAthenaCoreFacade
_consolidationService: PlanningConsolidationService
_planningService: PlanningService
_taskManagerService: TaskManagerService
_analysisService: AnalysisService
--
' --- Méthode Publique ---
ExecuteAsync(config: ConfigurationPlanification): Task<PlanificationRunResult>
}
}
package "Dépendances" {
package "Sources de Vérité" <<Folder>> {
class ProjetService
class RessourceService
class PlanningService
class TaskManagerService
}
package "Utilitaires" <<Folder>> {
class PreparationSolveurService
class DataTransformer
class PlanningConsolidationService
class AnalysisService
}
package "Facade Externe" <<Cloud>> {
class PlanAthenaCoreFacade
}
}
' --- Relations de Dépendance et d'Utilisation ---
PlanificationOrchestrator --> ProjetService
PlanificationOrchestrator --> RessourceService
PlanificationOrchestrator --> PreparationSolveurService
PlanificationOrchestrator --> DataTransformer
PlanificationOrchestrator --> PlanAthenaCoreFacade
PlanificationOrchestrator --> PlanningConsolidationService
PlanificationOrchestrator --> PlanningService
PlanificationOrchestrator --> TaskStatusService
PlanificationOrchestrator --> AnalysisService
PlanificationOrchestrator ..> ConfigurationPlanification : "utilise en entrée"
PlanificationOrchestrator ..> RunResult : "crée et retourne"
' --- Relations de Composition du DTO de Sortie ---
RunResult "1" *-- "1" ProcessChantierResultDto
RunResult "1" *-- "0..1" AnalysisReport
RunResult "1" *-- "0..1" MetierTensionReport
note top of PlanificationOrchestrator
<b>Chef d'Orchestre du Use Case "Planifier"</b>
Coordination pure, sans logique métier interne.
Appelle les services experts dans le bon ordre
et met à jour l'état de l'application.
end note
note right of PlanificationOrchestrator
<b>Flux d'Exécution Séquentiel</b>
<b>Collecte :</b> Lit les données brutes depuis les
sources de vérité (ProjetService, RessourceService
pour obtenir poolOuvriers et poolMetiers).
<b>Préparation :</b> Appelle les utilitaires
(PreparationSolveurService, DataTransformer)
pour formater les données pour la DLL.
<b>Exécution :</b> Invoque la méthode de calcul
externe via la Facade.
<b>Traitement :</b> Appelle les utilitaires de traitement
(PlanningConsolidationService, AnalysisService) en
leur passant les données nécessaires (ex: poolMetiers).
<b>Mise à Jour :</b> Applique les résultats aux sources
de vérité (PlanningService, TaskManagerService).
<b>Retour :</b> Construit et retourne le DTO
PlanificationRunResult à l'appelant.
end note
@enduml