@startuml
title Architecture PlanAthena - Vision M√©tier Simplifi√©e (v0.3.9)

!define DIRECTION top to bottom direction
top to bottom direction
skinparam packageStyle rectangle
skinparam linetype ortho

skinparam package {
  borderColor #555555
  borderThickness 2
  fontColor #333333
  backgroundColor #F8F9FA
}

skinparam class {
  borderColor #007ACC
  backgroundColor #DDEEFF
  arrowColor #005588
}

' ================================================
' === COUCHE IHM ===
' ================================================
package "üñ•Ô∏è Interface Utilisateur" as UI {
  
  package "Gestion de Projet" {
    class MainForm
    class NouveauProjetDialog
  }
  
  package "Qualification des T√¢ches" {
    class TacheForm
    class TacheDetailForm
    class ImportTacheForm
    class ImportCsvGroupeDialog
    class ImportWarningsDialog
  }
  
  package "Configuration Ressources" {
    class OuvrierForm
    class MetierForm
    class LotForm
    class BlocForm
    class CompetenceDialog
    class SelectionMetierDialog
  }
  
  package "Visualisation" {
    class PertDiagramControl
    class MetierDiagramControl
  }
}

' ================================================
' === COUCHE M√âTIER ===
' ================================================
package "‚öôÔ∏è Services M√©tier" as BUSINESS {
  
  class ProjetService {
    == Gestion Projet ==
    +CreerNouveauProjet()
    +SauvegarderProjet()
    +ChargerProjet()
    +ObtenirResumeProjet()
    +ValiderDonneesAvantPlanification()
    
    == Gestion M√©tiers ==
    +AjouterMetier()
    +ModifierMetier()
    +SupprimerMetier()
    +GetAllMetiers()
    +ObtenirMetiersTriesParDependance()
    
    == Gestion Lots (Phases) ==
    +AjouterLot()
    +ModifierLot()
    +ObtenirTousLesLots()
    +SupprimerLot()
    +GererPrecedenceLots()
  }
  
  class TacheService {
    == Qualification T√¢ches ==
    +AjouterTache()
    +ModifierTache()
    +SupprimerTache()
    +ObtenirTachesParLot()
    +ObtenirStatistiques()
    
    == Gestion Blocs (Contraintes) ==
    +AjouterBloc()
    +ModifierBloc()
    +ObtenirTousLesBlocs()
    +SupprimerBloc()
    +ValiderDependancesIntraBloc()
    +CalculerCapaciteOuvriers()
    
    == Import/Export ==
    +ImporterTachesCSV()
    +ExporterTaches()
  }
  
  class OuvrierService {
    == Gestion Ressources ==
    +AjouterOuvrier()
    +ModifierOuvrier()
    +SupprimerOuvrier()
    +ObtenirTousLesOuvriers()
    +GererCompetences()
  }
  
  class PlanificationService {
    == Planification Optimale ==
    +LancerPlanificationAsync()
    +ObtenirStatistiquesTraitement()
    +ChargerDonnees()
    
    == Pr√©paration Solveur ==
    +PreparerPourSolveur()
    +TransformToChantierSetupDto()
    
    == Consolidation R√©sultats ==
    +ConsoliderPourGantt()
    +ExporterVersGantt()
  }
  
  class ImportOrchestrationService {
    == Import Orchestr√© ==
    +ImporterTachesDepuisCsv()
    +ValiderStructureFichier()
    +GererMappingConfiguration()
  }
}

' ================================================
' === COUCHE DATA ===
' ================================================
package "üóÑÔ∏è Acc√®s aux Donn√©es" as DATA {
  
  package "Entit√©s M√©tier" {
    class ProjetData {
      +Taches: List<Tache>
      +Lots: List<Lot>
      +Blocs: List<Bloc>
      +Metiers: List<Metier>
      +Ouvriers: List<Ouvrier>
    }
    
    class Tache {
      +TacheId: string
      +IdImporte: string
      +TacheNom: string
      +HeuresHommeEstimees: int
      +MetierId: string
      +Dependencies: string
      +ExclusionsDependances: string
      +Type: TypeActivite
      +EstJalon: bool (computed)
      +LotId: string
      +BlocId: string
    }
    
    enum TypeActivite {
      Tache
      JalonUtilisateur
      JalonDeSynchronisation
      JalonTechnique
    }
    
    class Lot {
      +LotId: string
      +Nom: string
      +Priorite: int
      +CheminFichierPlan: string
      +Phases: ChantierPhase
    }
    
    class Bloc {
      +BlocId: string
      +Nom: string
      +CapaciteMaxOuvriers: int
    }
    
    class Metier {
      +MetierId: string
      +Nom: string
      +PrerequisMetierIds: string
      +CouleurHex: string
      +Pictogram: string
      +Phases: ChantierPhase
    }
    
    class Ouvrier {
      +OuvrierId: string
      +Nom: string
      +Prenom: string
      +CoutJournalier: int
      +MetierId: string
      +NiveauExpertise: NiveauExpertise
      +PerformancePct: int?
    }
    
    enum ChantierPhase {
      None
      GrosOeuvre
      SecondOeuvre
      Finition
      GarantieDecennale
    }
    
    enum NiveauExpertise {
      Debutant
      Confirme
      Expert
    }
  }
  
  package "Services Data" {
    class CsvDataService {
      +ImportCsv()
      +ExportCsv()
      +ValidateCsvStructure()
    }
    
    class ExcelReader {
      +ImportExcel()
      +ImportSapOuvriers()
      +ImportFieldwireTaches()
    }
    
    class GanttExportService {
      +ExporterVersGanttProjectXml()
      +GenererXmlGanttProjectConsolide()
    }
    
    class IdGeneratorService {
      +GenererProchainId()
      +ValiderFormatId()
    }
  }
  
  package "Configuration & Helpers" {
    class ImportMappingConfiguration
    class DependanceBuilder
    class ConfigurationBuilder
  }
}

' ================================================
' === EXTERNE ===
' ================================================
package "üåç Syst√®mes Externes" as EXTERNAL {
  class PlanAthenaCoreFacade {
    +ProcessChantier()
    +OptimiserPlanification()
  }
  
  class "Biblioth√®ques" as LIBS {
    +QuikGraph (Graphes)
    +CsvHelper (CSV)
    +Microsoft.Msagl (Diagrammes)
    +System.Text.Json (JSON)
  }
}

' ================================================
' === RELATIONS ===
' ================================================

' UI vers Business
UI -down-> BUSINESS : "Utilise"

' Business vers Data
BUSINESS -down-> DATA : "Persiste"

' Data vers External
DATA -down-> EXTERNAL : "Int√®gre"

' Relations d√©taill√©es principales
ProjetService -down-> ProjetData
TacheService -down-> Tache
OuvrierService -down-> Ouvrier
PlanificationService -down-> PlanAthenaCoreFacade

MainForm -down-> ProjetService
TacheForm -down-> TacheService
OuvrierForm -down-> OuvrierService
PlanificationService -right-> TacheService : "Charge donn√©es"
ImportOrchestrationService -down-> CsvDataService

' ================================================
' === NOTES M√âTIER ===
' ================================================

note top of BUSINESS
<b>PROCESSUS M√âTIER UNIFI√â</b>
1Ô∏è‚É£ Qualification des t√¢ches
2Ô∏è‚É£ Planification optimale (Or-Tools)
3Ô∏è‚É£ Suivi et re-planification
end note

note right of TacheService
<b>Gestion des Contraintes</b>
G√®re les t√¢ches ET leurs
contraintes (blocs).
Les d√©pendances entre t√¢ches
ne s'exercent qu'intra-bloc.
end note

note right of ProjetService
<b>Vision Macro</b>
G√®re les lots (phases) et
leurs r√®gles de pr√©c√©dence.
Lots = GrosOeuvre ‚Üí SecondOeuvre
end note

note right of PlanificationService
<b>C≈ìur de l'Optimisation</b>
Interface avec le solveur
Or-Tools via PlanAthena.Core
end note

@enduml