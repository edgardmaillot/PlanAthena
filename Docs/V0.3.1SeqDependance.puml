@startuml
skinparam sequenceArrowColor #005588
skinparam sequenceLifeLineBorderColor #007ACC
skinparam sequenceParticipantBackgroundColor #DDEEFF

title Service de Suggestions - Flux Principal (Version Simplifiée)

participant UI as "TacheDetailForm"
participant DB as "DependanceBuilder"
participant MS as "MetierService"
participant TS as "TacheService"

Note over UI,TS: Cas d'Usage: Création/Modification de Tâche

UI->>UI: Utilisateur ouvre formulaire tâche
UI->>DB: ObtenirDependancesPourTache(tache, contexteTaches)
activate DB

Note over DB: Phase 1: Filtrage Anti-Cycles
DB->>DB: FiltrerTachesEligibles(tache, contexteTaches)
DB->>DB: Exclure tâche elle-même
alt Tâche a un métier
    DB->>MS: GetTransitivePrerequisites(tache.MetierId)
    MS-->>DB: Prérequis transitifs
    DB->>DB: IdentifierMetiersFuturs(tache.MetierId)
    Note over DB: Exclure métiers qui dépendent du métier actuel
    DB->>DB: Filtrer selon métiers futurs
end
DB->>DB: → tachesEligibles (même bloc, anti-cycles)

Note over DB: Phase 2: Identification Suggestions
DB->>DB: IdentifierSuggestions(tache, tachesEligibles)
alt Tâche a un métier
    DB->>MS: GetPrerequisForMetier(tache.MetierId)
    MS-->>DB: Prérequis directs
    DB->>DB: Identifier métiers présents dans bloc
    
    alt Prérequis directs présents
        DB->>DB: Utiliser prérequis directs
    else Aucun prérequis direct
        Note over DB: Règle 3: Remontée ciblée
        DB->>DB: ObtenirPrerequisFinaux(metierId, metiersPresents)
    end
    
    loop Pour chaque métier prérequis
        DB->>DB: TrouverFinsDeChaine(metierPrerequis, tachesEligibles)
        Note over DB: Tâches sans successeur même métier
        Note over DB: Si successeurs jalons → suggérer jalons
        DB->>DB: Ajouter fins de chaîne aux suggestions
    end
end

Note over DB: Phase 3: Classification
DB->>DB: ParseDependances(tache.Dependencies)
DB->>DB: ParseDependances(tache.ExclusionsDependances)
DB->>DB: ClassifierDependances(eligibles, strictes, excluses, suggestions)

loop Pour chaque tâche éligible
    alt Dans Dependencies
        DB->>DB: Créer DependanceAffichage(Etat.Stricte, EstHeritee=false)
    else Dans ExclusionsDependances
        DB->>DB: Créer DependanceAffichage(Etat.Exclue, EstHeritee=true)
    else Dans suggestions
        DB->>DB: Créer DependanceAffichage(Etat.Suggeree, EstHeritee=true)
    else
        DB->>DB: Créer DependanceAffichage(Etat.Neutre, EstHeritee=false)
    end
end

DB->>DB: Trier par TacheNom
DB-->>UI: List<DependanceAffichage>
deactivate DB

Note over UI: Affichage avec États Visuels
UI->>UI: Afficher liste avec couleurs/coches
Note over UI: Stricte: noir + coché
Note over UI: Exclue: rouge + décoché  
Note over UI: Suggérée: bleu + coché
Note over UI: Neutre: normal + décoché

Note over UI,TS: Sauvegarde des Modifications
User->>UI: Modifie coches et sauvegarde
UI->>UI: SauvegarderModifications()
Note over UI: Coché → Dependencies
Note over UI: Décoché (si suggérée) → ExclusionsDependances
UI->>TS: ModifierTache(tache)
activate TS
TS->>TS: Persister Dependencies et ExclusionsDependances
deactivate TS

@enduml