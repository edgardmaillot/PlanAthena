@startuml
!theme plain
skinparam class {
  borderColor #007ACC
  backgroundColor #DDEEFF
  arrowColor #005588
}
title DependanceBuilder - Architecture Classes (Version "Graph First" + Exclusions)

' ================================================
' ===        CLASSE PRINCIPALE (REFACTORIS√âE)   ===
' ================================================
class DependanceBuilder <<SERVICE SUGGESTIONS>> {
  -MetierService _metierService
  __M√©thode Publique Principale__
  +ObtenirDependancesPourTache(Tache tache, List<Tache> contexteTaches) : List<DependanceAffichage>
  __M√©thodes Priv√©es Architecture "Graph First"__
  -ConstruireGrapheBloc(List<Tache> taches) : BidirectionalGraph<string,Edge<string>>
  -CalculerTousLesSuccesseurs(graphe, taches) : Dictionary<string,HashSet<string>>
  -ExploreerSuccesseurs(graphe, tacheId, successeurs, visite) : void
  -FiltrerCandidatsValides(tache, contexteTaches, successeurs) : List<Tache>
  __M√©thodes Suggestions M√©tier + Exclusions__
  -AppliquerSuggestionsMetier(tache, candidatsValides) : HashSet<string>
  -TrouverMeilleuresTachesPourSuggestion(tachesDuMetier, toutesLesTaches) : List<Tache>
  -TrouverFinsDeChaineDuMetier(tachesDuMetier) : List<Tache>
  -RemonterChainePrerequis(metierId, metiersPresents) : HashSet<string>
  __M√©thodes Utilitaires__
  -ParseDependances(string dependancesStr) : HashSet<string>
  -ClassifierDependances(candidats, strictes, excluses, suggestions) : List<DependanceAffichage>
}

' ================================================
' ===           CLASSES DTO/UTILITAIRES         ===
' ================================================
class DependanceAffichage <<DTO>> {
  +Tache TachePredecesseur
  +EtatDependance Etat  
  +bool EstHeritee
  +ToString() : string
}

enum EtatDependance {
  Neutre
  Suggeree  
  Stricte
  Exclue
}

' ================================================
' ===      D√âPENDANCES EXTERNES (EXISTANTES)    ===
' ================================================
class MetierService <<EXISTANT>> {
  +GetPrerequisForMetier(string metierId) : IReadOnlyList<string>
  +GetTransitivePrerequisites(string metierId) : HashSet<string>
  +GetAllMetiers() : IReadOnlyList<Metier>
}

class TacheService <<EXISTANT>> {
  +ModifierTache(Tache tacheModifiee) : void
  +ObtenirTachesParBloc(string blocId) : List<Tache>
}

class Tache <<EXISTANT>> {
  +string TacheId
  +string TacheNom  
  +string MetierId
  +string Dependencies
  +string ExclusionsDependances
  +string BlocId
  +string LotId
  +TypeActivite Type
  +bool EstJalon
}

enum TypeActivite <<EXISTANT>> {
  Tache
  JalonUtilisateur
  JalonDeSynchronisation
  JalonTechnique
}

class "QuikGraph.BidirectionalGraph" as BidirectionalGraph <<LIBRARY>> {
  +AddVertex(string vertex) : bool
  +AddEdge(Edge<string> edge) : bool  
  +InEdges(string vertex) : IEnumerable<Edge<string>>
  +OutEdges(string vertex) : IEnumerable<Edge<string>>
}

' ================================================
' ===              UI INTERFACE                 ===
' ================================================
class TacheDetailForm <<UI>> {
  -ToolTip _tooltip
  +ChargerListeDependances() : void
  +chkListDependances_MouseMove(sender, e) : void
  -SauvegarderModifications() : void
  -GetEtatDescription(EtatDependance etat) : string
}

' ================================================
' ===                RELATIONS                   ===
' ================================================
TacheDetailForm --> DependanceBuilder : utilise
DependanceBuilder --> MetierService : consulte pr√©requis
DependanceBuilder --> BidirectionalGraph : construit graphe temporaire
DependanceBuilder ..> DependanceAffichage : produit
TacheDetailForm --> TacheService : ModifierTache()

DependanceAffichage --> Tache : r√©f√©rence
DependanceAffichage --> EtatDependance : utilise
Tache --> TypeActivite : utilise

note right of DependanceBuilder::ConstruireGrapheBloc
  <b>Source de V√©rit√©:</b> Graphe r√©el du bloc
  bas√© sur Dependencies existantes
end note

note right of DependanceBuilder::FiltrerCandidatsValides
  <b>Anti-Cycles Robuste:</b> Exclut successeurs
  de la t√¢che (r√®gle math√©matique infaillible)
end note

note right of DependanceBuilder::AppliquerSuggestionsMetier  
  <b>Gestion Exclusions:</b> Filtre t√¢ches exclues
  avant suggestions (Cas Particulier 2)
end note

note right of DependanceBuilder::TrouverMeilleuresTachesPourSuggestion
  <b>Priorit√©s:</b> Jalons > Fins de cha√Æne > Toutes
  Si fin cha√Æne exclue ‚Üí remonte automatiquement
end note

note right of TacheDetailForm
  <b>√âtats d'affichage avec ic√¥nes:</b>
  Stricte: ‚úÖ + coch√© + gras
  Exclue: ‚ùå + d√©coch√© + barr√©
  Sugg√©r√©e: üí° + coch√© + italique
  Neutre: ‚ö™ + d√©coch√© + normal
  
  <b>Infobulles:</b> ID, m√©tier, dur√©e, √©tat
  sur survol des d√©pendances
end note

@enduml