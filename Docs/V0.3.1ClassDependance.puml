@startuml
!theme plain
skinparam class {
  borderColor #007ACC
  backgroundColor #DDEEFF
  arrowColor #005588
}
title DependanceBuilder - Architecture Classes (Service Suggestions Focus)

' ================================================
' ===        CLASSE PRINCIPALE (SIMPLIFIÉE)     ===
' ================================================
class DependanceBuilder <<SERVICE SUGGESTIONS>> {
  -MetierService _metierService
  __Méthode Publique Principale__
  +ObtenirDependancesPourTache(Tache tache, List<Tache> contexteTaches) : List<DependanceAffichage>
  __Méthodes Privées (≤30 lignes chacune)__
  -FiltrerTachesEligibles(Tache tache, List<Tache> contexteTaches) : List<Tache>
  -IdentifierMetiersFuturs(string metierReference) : HashSet<string>
  -IdentifierSuggestions(Tache tache, List<Tache> tachesEligibles) : HashSet<string>
  -ConstruireGrapheDepuisContexte(List<Tache> taches) : BidirectionalGraph<string,Edge<string>>
  -ObtenirPrerequisFinaux(string metierId, HashSet<string> metiersPresents) : HashSet<string>
  -TrouverFinsDeChaine(string metierId, List<Tache> taches) : IEnumerable<string>
  -ParseDependances(string dependancesStr) : HashSet<string>
  -ClassifierDependances(List<Tache> eligibles, HashSet<string> strictes, HashSet<string> excluses, HashSet<string> suggestions) : List<DependanceAffichage>
}

' ================================================
' ===           CLASSES DTO/UTILITAIRES         ===
' ================================================
class DependanceAffichage <<DTO>> {
  +Tache TachePredecesseur
  +EtatDependance Etat  
  +bool EstHeritee
  +ToString() : string
}

enum EtatDependance {
  Neutre
  Suggeree  
  Stricte
  Exclue
}

' ================================================
' ===      DÉPENDANCES EXTERNES (EXISTANTES)    ===
' ================================================
class MetierService <<EXISTANT>> {
  +GetPrerequisForMetier(string metierId) : IReadOnlyList<string>
  +GetTransitivePrerequisites(string metierId) : HashSet<string>
  +GetAllMetiers() : IReadOnlyList<Metier>
}

class TacheService <<EXISTANT>> {
  +ModifierTache(Tache tacheModifiee) : void
  +ObtenirTachesParBloc(string blocId) : List<Tache>
}

class Tache <<EXISTANT>> {
  +string TacheId
  +string TacheNom  
  +string MetierId
  +string Dependencies
  +string ExclusionsDependances
  +string BlocId
  +string LotId
  +TypeActivite Type
  +bool EstJalon
}

enum TypeActivite <<EXISTANT>> {
  Tache
  JalonUtilisateur
  JalonDeSynchronisation
  JalonTechnique
}

class "QuikGraph.BidirectionalGraph" as BidirectionalGraph <<LIBRARY>> {
  +AddVertex(string vertex) : bool
  +AddEdge(Edge<string> edge) : bool  
  +InEdges(string vertex) : IEnumerable<Edge<string>>
  +OutEdges(string vertex) : IEnumerable<Edge<string>>
}

' ================================================
' ===              UI INTERFACE                 ===
' ================================================
class TacheDetailForm <<UI>> {
  +ChargerListeDependances() : void
  -SauvegarderModifications() : void
}

' ================================================
' ===                RELATIONS                   ===
' ================================================
TacheDetailForm --> DependanceBuilder : utilise
DependanceBuilder --> MetierService : consulte prérequis
DependanceBuilder --> BidirectionalGraph : construit graphe temporaire
DependanceBuilder ..> DependanceAffichage : produit
TacheDetailForm --> TacheService : ModifierTache()

DependanceAffichage --> Tache : référence
DependanceAffichage --> EtatDependance : utilise
Tache --> TypeActivite : utilise

note right of DependanceBuilder::FiltrerTachesEligibles
  <b>Anti-Cycles:</b> Exclut métiers "futurs"
  Même bloc uniquement (Règle 1)
end note

note right of DependanceBuilder::IdentifierSuggestions  
  <b>Règle 3:</b> Suggestion ciblée
  Fins de chaîne des prérequis
end note

note right of DependanceBuilder::TrouverFinsDeChaine
  <b>Jalons:</b> Points de connexion optimaux
  Tâches sans successeur même métier
end note

note right of TacheDetailForm
  <b>États d'affichage:</b>
  Stricte (noir, coché)
  Exclue (rouge, décoché)  
  Suggérée (bleu, coché)
  Neutre (normal, décoché)
end note

@enduml