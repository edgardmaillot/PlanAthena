@startuml
'---------------------------------
' Titre et Configuration
'---------------------------------
title Diagramme de Séquence pour ProjetService (Opérations CRUD)
autonumber

actor Utilisateur

'---------------------------------
' Participants
'---------------------------------
participant "form:StructureView" as StructureView
participant "form:TaskManagerView" as TaskManagerView
participant "service:ProjetService" as ProjetService
participant "service:IdGeneratorService" as IdGeneratorService

'=================================
' GROUPE 1: CREATION
'=================================
group Création d'un Lot

    Utilisateur -> StructureView : Clic sur "Nouveau Lot"
    activate StructureView

    StructureView -> ProjetService : CreerLot()
    activate ProjetService
    
    ProjetService -> IdGeneratorService : GenererProchainLotId(...)
    activate IdGeneratorService
    IdGeneratorService --> ProjetService : nouveauLotId
    deactivate IdGeneratorService
    
    ProjetService -> ProjetService : _lots.Add(nouveauLotId, nouveauLot)
    
    ProjetService --> StructureView : nouveauLot
    deactivate ProjetService

    StructureView -> StructureView : AfficherDetailsLot(nouveauLot)
    deactivate StructureView

end

group Création d'un Bloc (depuis le formulaire de Tâches ou StructureView)

    Utilisateur -> TaskManagerView : Ouvre le formulaire en mode création
    activate TaskManagerView

    TaskManagerView -> ProjetService : CreerBloc(lotIdParent, ...)
    activate ProjetService
    
    ProjetService -> ProjetService : ObtenirLotParId(lotIdParent)
    ProjetService -> IdGeneratorService : GenererProchainBlocId(...)
    activate IdGeneratorService
    IdGeneratorService --> ProjetService : nouveauBlocId
    deactivate IdGeneratorService
    
    ProjetService -> ProjetService : lotParent.Blocs.Add(nouveauBloc)
    
    ProjetService --> TaskManagerView : nouveauBloc
    deactivate ProjetService

    TaskManagerView -> TaskManagerView : AfficherDetailsBloc(nouveauBloc)
    deactivate TaskManagerView

end



'=================================
' GROUPE 2: MODIFICATION
'=================================
group Modification d'un Lot

    Utilisateur -> StructureView : Clic sur "Sauvegarder"
    activate StructureView

    StructureView -> ProjetService : ModifierLot(lotModifie)
    activate ProjetService
    
    ProjetService -> ProjetService : _lots[lotModifie.Id] = lotModifie

    ProjetService --> StructureView : void
    deactivate ProjetService

    StructureView -> StructureView : this.Close()
    deactivate StructureView

end

group Modification d'un Bloc (depuis le formulaire de Tâches ou StructureView)

    Utilisateur -> TaskManagerView : Clic sur "Sauvegarder"
    activate TaskManagerView

    TaskManagerView -> ProjetService : ModifierBloc(blocModifie)
    activate ProjetService
    
    ProjetService -> ProjetService : ObtenirLotParId(blocModifie.LotId)
    ProjetService -> ProjetService : lotParent.Blocs[blocIndex] = blocModifie

    ProjetService --> TaskManagerView : void
    deactivate ProjetService

    TaskManagerView -> TaskManagerView : this.Close()
    deactivate TaskManagerView

end


'=================================
' GROUPE 3: SUPPRESSION
'=================================
group Suppression d'un Lot

    Utilisateur -> StructureView : Clic sur "Supprimer"
    activate StructureView

    StructureView -> ProjetService : SupprimerLot(lotId)
    activate ProjetService
    
    '-- Vérification des dépendances --'
    ProjetService -> ProjetService : ObtenirTachesParLot(lotId)
    
    alt Le lot est utilisé par des tâches
        ProjetService --> StructureView : throw InvalidOperationException
        StructureView -> Utilisateur : Affiche message d'erreur
    else Le lot n'est pas utilisé
        ProjetService -> ProjetService : _lots.Remove(lotId)
        ProjetService --> StructureView : void
    end
    
    deactivate ProjetService
    deactivate StructureView

end

group Suppression d'un Bloc (uniquement depuis StructureView)

    Utilisateur -> StructureView : Clic sur "Supprimer le Bloc"
    activate StructureView

    StructureView -> ProjetService : SupprimerBloc(blocId)
    activate ProjetService
    
    '-- Vérification des dépendances --'
    ProjetService -> ProjetService : ObtenirTachesParBloc(blocId)
    
    alt Le bloc est utilisé par des tâches
        ProjetService --> StructureView : throw InvalidOperationException
        StructureView -> Utilisateur : Affiche message d'erreur
    else Le bloc n'est pas utilisé
        ProjetService -> ProjetService : ObtenirLotParId(lotIdParent)
        ProjetService -> ProjetService : lotParent.Blocs.Remove(blocId)
        ProjetService --> StructureView : void
    end
    
    deactivate ProjetService
    deactivate StructureView

end
@enduml