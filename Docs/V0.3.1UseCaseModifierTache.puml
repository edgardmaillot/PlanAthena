@startuml
' --- Configuration ---
skinparam componentStyle uml2
skinparam wrapWidth 200
skinparam participantPadding 5
skinparam sequenceMessageAlign center
skinparam sequenceArrowColor #005588
skinparam sequenceLifeLineBorderColor #007ACC
skinparam sequenceParticipantBackgroundColor #DDEEFF

title Séquence de cas d'usage 2 : Modification d'une tâche

actor User
participant PertDiagramControl
participant TacheForm
participant "TacheDetailForm\n(en Popup)" as Popup
participant TacheService
participant DependanceBuilder

User -> PertDiagramControl : Double-clique sur une tâche (ex: T002)
activate PertDiagramControl

PertDiagramControl -> TacheForm : Déclenche l'événement TacheDoubleClicked
deactivate PertDiagramControl
activate TacheForm

TacheForm -> TacheService : **ObtenirTacheParId("T002")**
activate TacheService
TacheService --> TacheForm : retourne l'objet `Tache` complet
deactivate TacheService

TacheForm -> Popup ** : new TacheDetailForm(...)
TacheForm -> Popup : ChargerTache(tacheExistante, modeCreation=false)
TacheForm -> Popup : ShowDialog()
activate Popup
deactivate TacheForm

group Sauvegarde et Validation
    User -> Popup : Modifie les dépendances et clique "Sauvegarder"
    
    Popup -> TacheService : **ModifierTache(_tache)**
    activate TacheService
    deactivate TacheService
    
    Popup -> DependanceBuilder : **ConstruireDependancesLogiques(toutesLesTaches)**
    activate DependanceBuilder
    deactivate DependanceBuilder
end

Popup -> Popup : met DialogResult = OK et se ferme
Popup --> TacheForm : retourne DialogResult.OK
deactivate Popup
activate TacheForm

TacheForm -> TacheForm : **RafraichirDiagrammeEtStatistiques()**
deactivate TacheForm
@enduml