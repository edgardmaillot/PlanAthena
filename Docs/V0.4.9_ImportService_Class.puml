@startuml
' --- Configuration ---
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam class {
    BackgroundColor #F5DEB3
    BorderColor #A0522D
    ArrowColor #A0522D
}
hide empty members

title Structure v0.5.0 : Architecture Import/Export Complète

package "Services Accès Données" {
    class "<b>ImportService</b>" as ImportSvc {
        '-- Dépendances --'
        - _projetService: ProjetService
        - _ressourceService: RessourceService
        - _taskManagerService: TaskManagerService
        - _csvDataService: CsvDataService
        --
        '-- Import Tâches --'
        + ImporterTachesCSV(filePath, lotIdCible, mappingConfig, confirmerEcrasement)
        --
        '-- Import Ouvriers (Chargement Pur) --'
        + ImporterOuvriers(ouvriersAImporter, remplacerExistants)
        + ImporterOuvriersFormatNatif(filePath, remplacerExistants)
        --
        '-- Utilitaires --'
        + DetectCsvDelimiter(filePath): string
        --
        '-- Méthodes Privées --'
        - ImporterDonneesInitialTaches(...)
        - RemapperDependancesDesTaches(...)
        - LireCsvBrut(...)
    }
    note right of ImportSvc : **Service de Chargement Pur**\nNe fait plus de mapping complexe.\nReçoit des objets construits\net les charge dans le système.

    class "<b>ExportService</b>" as ExportSvc {
        '-- Export vers CSV --'
        + ExporterTachesCSV(tachesAExporter, filePath)
        + ExporterOuvriersCSV(tousLesOuvriers, filePath)
    }
    note right of ExportSvc : **Service d'Export Dédié**\nUtilise ChoETL et des DTOs\npour sérialiser vers CSV.\nGère l'encodage UTF-8.
}

package "Services Orchestration" {
    class "<b>ImportWizardOrchestrator</b>" as Orchestrator {
        - _importService: ImportService
        - _ressourceService: RessourceService
        --
        '-- Orchestration Principale --'
        + LancerWizardImportOuvriers(filePath): ImportResult
        --
        '-- Logique ETL Privée --'
        - TransformerDonneesBrutesEnOuvriers(etat): (List<Ouvrier>, List<string>)
        - CreerWizardHostForm(title): Form
        --
        '-- Classes Internes --'
        + ImportOuvrierState
    }
    note right of Orchestrator : **Orchestrateur de Mapping**\nGère le wizard d'import.\nTransforme les données brutes\nen objets métier.\nCoordonne les étapes UI.

    class "ImportOuvrierState" as State {
        + FilePath: string
        + RemplacerExistants: bool
        + HasHeaderRecord: bool
        + ColumnIndexMappings: Dictionary<string, int>
        + ValueMappings: Dictionary<string, MetierMappingItem>
    }
    note bottom of State : **État Partagé du Wizard**\nDTO interne pour passer\nles informations entre\nles étapes du wizard.
}

package "Services Métier (Sources de Vérité)" {
    class "<b>TaskManagerService</b>" as TaskSvc {
        + ObtenirToutesLesTaches(lotId, blocId)
        + CreerTache(...)
        + ModifierTache(...)
        + SupprimerTache(...)
    }
    class "<b>ProjetService</b>" as ProjSvc {
        + ObtenirLotParId(...)
        + ObtenirBlocsParLot(...)
        + CreerBloc(...)
        + SupprimerBloc(...)
    }
    class "<b>RessourceService</b>" as ResSvc {
        + GetMetierById(...)
        + GetAllOuvriers()
        + CreerOuvrier(...)
        + ModifierOuvrier(...)
        + ViderOuvriers()
        + AjouterCompetence(...)
    }
}

package "DTOs Import/Export" {
    class "TacheExportDto" as TacheDTO {
        + IdImporte: string
        + TacheNom: string
        + MetierId: string
        + HeuresHommeEstimees: int
        + BlocNom: string
        + Dependencies: string
        + ExclusionsDependances: string
        + Type: string
    }
    
    class "OuvrierCsvRecord" as OuvrierDTO {
        + OuvrierId: string
        + Nom: string
        + Prenom: string
        + CoutJournalier: decimal
        + MetierId: string
    }
}

package "IHM" {
    class "TaskManagerView" as UI_Task {
        - ExecuterImportTaches(...)
    }
    
    class "RessourceView" as UI_Ressource {
        - ExecuterImportOuvriers(...)
    }
    
    class "ImportMapOuvrierP1" as UI_Wizard1 {
        + Mappings: Dictionary<string, int>
        + HasHeader: bool
        + SuivantClicked: EventHandler
        + AnnulerClicked: EventHandler
    }
    
    class "ImportMapOuvrierP2" as UI_Wizard2 {
        + ValueMappings: Dictionary<string, MetierMappingItem>
        + TerminerClicked: EventHandler
        + RetourClicked: EventHandler
    }
}

' --- Relations Principales ---
UI_Task ..> ImportSvc : appelle ImporterTachesCSV
UI_Task ..> ExportSvc : appelle ExporterTachesCSV
UI_Ressource ..> Orchestrator : appelle LancerWizardImportOuvriers
UI_Ressource ..> ExportSvc : appelle ExporterOuvriersCSV

Orchestrator *-- ImportSvc : utilise pour le chargement final
Orchestrator *-- ResSvc : utilise pour les validations
Orchestrator *-- State : utilise comme DTO interne

Orchestrator ..> UI_Wizard1 : instancie et affiche
Orchestrator ..> UI_Wizard2 : instancie et affiche

ImportSvc *-- TaskSvc
ImportSvc *-- ProjSvc
ImportSvc *-- ResSvc

ExportSvc ..> TacheDTO : utilise pour export tâches
ExportSvc ..> OuvrierDTO : utilise pour export ouvriers

@enduml