using PlanAthena.Data;
using PlanAthena.Services.Business;
using PlanAthena.Services.Business.DTOs;
using QuikGraph;
using QuikGraph.Algorithms; 
using System;
using System.Collections.Generic;
using System.Linq;

namespace PlanAthena.Utilities
{
    /// <summary>
    /// Service de suggestions intelligent pour les d√©pendances de t√¢ches - Version 2.0 "Graph First".
    /// 
    /// ARCHITECTURE REFACTORIS√âE :
    /// Cette version abandonne les algorithmes complexes bas√©s sur les m√©tiers au profit
    /// d'une approche simple et fiable bas√©e sur le graphe r√©el des t√¢ches du bloc.
    /// 
    /// PRINCIPE FONDAMENTAL :
    /// 1. Construire le graphe r√©el du bloc √† partir des d√©pendances existantes
    /// 2. Identifier les successeurs de chaque t√¢che dans ce graphe
    /// 3. Filtrer les candidats valides (pas de cycle)
    /// 4. Appliquer les suggestions m√©tier sur cette base saine
    /// 
    /// AVANTAGES :
    /// - Source de v√©rit√© unique : le graphe des d√©pendances r√©elles
    /// - Pr√©vention robuste des cycles
    /// - Logique simple et testable
    /// - Base solide pour le mapping automatique futur
    /// </summary>
    public class DependanceBuilder
    {
        private readonly ProjetService _projetService; 

        public DependanceBuilder(ProjetService projetService) 
        {
            _projetService = projetService ?? throw new ArgumentNullException(nameof(projetService));
        }

        /// <summary>
        /// Valide qu'un m√©tier et ses pr√©requis ne cr√©ent pas de d√©pendance circulaire.
        /// </summary>
        /// <param name="metier">Le m√©tier √† valider, potentiellement avec des pr√©requis modifi√©s.</param>
        /// <param name="tousLesMetiers">L'ensemble de tous les m√©tiers du projet (y compris le m√©tier en cours de modification, si c'est une modification).</param>
        /// <exception cref="InvalidOperationException">Lanc√©e si une circularit√© est d√©tect√©e.</exception>
        public void ValiderMetier(Metier metier, IEnumerable<Metier> tousLesMetiers)
        {
            if (metier == null) throw new ArgumentNullException(nameof(metier));
            if (tousLesMetiers == null) throw new ArgumentNullException(nameof(tousLesMetiers));

            var graph = new AdjacencyGraph<string, Edge<string>>();
            var currentMetiers = tousLesMetiers.ToDictionary(m => m.MetierId, m => m);

            // Mettre √† jour le m√©tier en cours de validation dans la collection temporaire
            currentMetiers[metier.MetierId] = metier;

            graph.AddVertexRange(currentMetiers.Keys);

            foreach (var m in currentMetiers.Values)
            {
                // On it√®re sur toutes les listes de pr√©requis de toutes les phases
                if (m.PrerequisParPhase != null)
                {
                    foreach (var prerequisId in m.PrerequisParPhase.Values.SelectMany(p => p).Distinct())
                    {
                        if (currentMetiers.ContainsKey(prerequisId))
                        {
                            graph.AddEdge(new Edge<string>(prerequisId, m.MetierId));
                        }
                    }
                }
            }

            try
            {
                graph.TopologicalSort();
            }
            catch (NonAcyclicGraphException)
            {
                throw new InvalidOperationException($"D√©pendance circulaire d√©tect√©e pour le m√©tier '{metier.Nom}' (ID: {metier.MetierId}). Veuillez revoir ses pr√©requis.");
            }
        }


        /// <summary>
        /// M√©thode principale du service : g√©n√®re la liste compl√®te des d√©pendances
        /// avec leurs √©tats d'affichage pour une t√¢che donn√©e.
        /// 
        /// ARCHITECTURE REFACTORIS√âE :
        /// 1. Construction du graphe r√©el du bloc
        /// 2. Calcul des successeurs pour d√©tection de cycles
        /// 3. Filtrage des candidats valides
        /// 4. Application des suggestions m√©tier
        /// 5. Classification finale
        /// </summary>
        public List<DependanceAffichage> ObtenirDependancesPourTache(Tache tache, List<Tache> contexteTaches, ChantierPhase phaseContexte)
        {
            if (tache == null)
                throw new ArgumentNullException(nameof(tache));
            if (contexteTaches == null)
                throw new ArgumentNullException(nameof(contexteTaches));

            try
            {
                // 1. Construire le graphe r√©el du bloc (source de v√©rit√©)
                var grapheBloc = ConstruireGrapheBloc(contexteTaches);

                // 2. Calculer tous les successeurs pour d√©tection de cycles
                var successeursParTache = CalculerTousLesSuccesseurs(grapheBloc, contexteTaches);

                // 3. Filtrer les candidats valides (pas de cycle)
                var candidatsValides = FiltrerCandidatsValides(tache, contexteTaches, successeursParTache);

                // 4. Appliquer les suggestions m√©tier sur la base saine
                var suggestions = AppliquerSuggestionsMetier(tache, candidatsValides, phaseContexte);

                // 5. Classification finale
                var strictes = ParseDependances(tache.Dependencies);
                var excluses = ParseDependances(tache.ExclusionsDependances);

                return ClassifierDependances(candidatsValides, strictes, excluses, suggestions);
            }
            catch (Exception)
            {
                // Mode d√©grad√© : retourner une liste vide plut√¥t que de planter
                return new List<DependanceAffichage>();
            }
        }

        /// <summary>
        /// Construit le graphe r√©el du bloc √† partir des d√©pendances existantes.
        /// 
        /// SOURCE DE V√âRIT√â UNIQUE :
        /// Ce graphe repr√©sente fid√®lement les relations de d√©pendances
        /// telles qu'elles existent actuellement dans le bloc.
        /// 
        /// DONN√âES UTILIS√âES :
        /// - Tache.Dependencies (d√©pendances strictes d√©finies par l'utilisateur)
        /// - Ignore Tache.ExclusionsDependances (ce sont des rejets, pas des liens)
        /// </summary>
        private BidirectionalGraph<string, Edge<string>> ConstruireGrapheBloc(List<Tache> taches)
        {
            var graphe = new BidirectionalGraph<string, Edge<string>>();

            // Ajouter tous les sommets (t√¢ches)
            foreach (var tache in taches)
            {
                if (!string.IsNullOrEmpty(tache.TacheId))
                {
                    graphe.AddVertex(tache.TacheId);
                }
            }

            // Ajouter les ar√™tes bas√©es sur les d√©pendances r√©elles
            foreach (var tache in taches)
            {
                if (string.IsNullOrEmpty(tache.TacheId)) continue;

                var dependances = ParseDependances(tache.Dependencies);
                foreach (var dependanceId in dependances)
                {
                    // V√©rifier que la d√©pendance existe dans le contexte
                    if (taches.Any(t => t.TacheId == dependanceId))
                    {
                        // Ar√™te : dependanceId ‚Üí tache.TacheId
                        graphe.AddEdge(new Edge<string>(dependanceId, tache.TacheId));
                    }
                }
            }

            return graphe;
        }

        /// <summary>
        /// Calcule tous les successeurs (directs et transitifs) pour chaque t√¢che du bloc.
        /// 
        /// OBJECTIF :
        /// Identifier pour chaque t√¢che X l'ensemble de toutes les t√¢ches qui en d√©pendent
        /// directement ou indirectement. Ceci permet une d√©tection robuste des cycles.
        /// 
        /// ALGORITHME :
        /// Parcours en profondeur depuis chaque t√¢che pour d√©couvrir tous les descendants.
        /// </summary>
        private Dictionary<string, HashSet<string>> CalculerTousLesSuccesseurs(
            BidirectionalGraph<string, Edge<string>> graphe, List<Tache> taches)
        {
            var successeursParTache = new Dictionary<string, HashSet<string>>();

            foreach (var tache in taches)
            {
                if (string.IsNullOrEmpty(tache.TacheId)) continue;

                var successeurs = new HashSet<string>();
                var visite = new HashSet<string>();

                ExploreerSuccesseurs(graphe, tache.TacheId, successeurs, visite);
                successeursParTache[tache.TacheId] = successeurs;
            }

            return successeursParTache;
        }

        /// <summary>
        /// Exploration r√©cursive des successeurs d'une t√¢che donn√©e.
        /// 
        /// PARCOURS EN PROFONDEUR :
        /// Visite tous les descendants directs et indirects en √©vitant les cycles
        /// gr√¢ce au set de t√¢ches d√©j√† visit√©es.
        /// üîß CORRIG√â V0.4.2.1 (Anti-cycle) 
        /// </summary>
        private void ExploreerSuccesseurs(BidirectionalGraph<string, Edge<string>> graphe,
            string tacheId, HashSet<string> successeurs, HashSet<string> visite)
        {
            if (visite.Contains(tacheId)) return; // √âviter les cycles infinis dans le graphe lui-m√™me
            visite.Add(tacheId);

            if (!graphe.ContainsVertex(tacheId)) return;

            // Explorer tous les successeurs directs
            foreach (var edge in graphe.OutEdges(tacheId))
            {
                var successeurId = edge.Target;

                // On ajoute le successeur √† la liste des successeurs de la t√¢che d'origine
                successeurs.Add(successeurId);

                // Exploration r√©cursive des successeurs du successeur
                // L'ordre des param√®tres est maintenant correct : (..., successeurs, visite)
                ExploreerSuccesseurs(graphe, successeurId, successeurs, visite);
            }
        }

        /// <summary>
        /// Filtre les candidats valides pour √©viter la cr√©ation de cycles.
        /// 
        /// R√àGLE ANTI-CYCLE ROBUSTE :
        /// Une t√¢che X peut d√©pendre de Y seulement si Y n'est pas dans les successeurs de X.
        /// En d'autres termes : si Y d√©pend d√©j√† de X (directement ou indirectement),
        /// alors X ne peut pas d√©pendre de Y.
        /// 
        /// CETTE APPROCHE EST INFAILLIBLE :
        /// Contrairement aux heuristiques sur les m√©tiers, cette r√®gle est math√©matiquement
        /// garantie d'emp√™cher les cycles dans un graphe orient√©.
        /// </summary>
        private List<Tache> FiltrerCandidatsValides(Tache tacheCible, List<Tache> contexteTaches,
            Dictionary<string, HashSet<string>> successeursParTache)
        {
            var candidatsValides = new List<Tache>();

            // Obtenir les successeurs de la t√¢che cible
            var successeursDeLaCible = successeursParTache.ContainsKey(tacheCible.TacheId)
                ? successeursParTache[tacheCible.TacheId]
                : new HashSet<string>();

            foreach (var candidat in contexteTaches)
            {
                // Exclure la t√¢che elle-m√™me
                if (candidat.TacheId == tacheCible.TacheId) continue;

                // R√àGLE ANTI-CYCLE : Si le candidat est un successeur de la cible,
                // alors la cible ne peut pas d√©pendre du candidat
                if (successeursDeLaCible.Contains(candidat.TacheId)) continue;

                // Candidat valide
                candidatsValides.Add(candidat);
            }

            return candidatsValides;
        }

        /// <summary>
        /// Applique les suggestions m√©tier sur la base des candidats valides.
        /// 
        /// APPROCHE SIMPLIFI√âE :
        /// Maintenant que nous avons une base saine (pas de cycles possibles),
        /// nous pouvons appliquer les r√®gles m√©tier de mani√®re simple et fiable.
        /// 
        /// R√àGLES M√âTIER APPLIQU√âES :
        /// - Si la t√¢che a un m√©tier, sugg√©rer les t√¢ches des m√©tiers pr√©requis
        /// - Privil√©gier les jalons quand ils existent
        /// - Appliquer la remont√©e de cha√Æne si n√©cessaire
        /// </summary>
        private HashSet<string> AppliquerSuggestionsMetier(Tache tache, List<Tache> candidatsValides, ChantierPhase phaseContexte)
        {
            var suggestions = new HashSet<string>();

            // Pas de suggestions pour les t√¢ches sans m√©tier (jalons)
            if (string.IsNullOrEmpty(tache.MetierId))
                return suggestions;

            try
            {
                // Obtenir les pr√©requis m√©tier via ProjetService
                var prerequisMetier = _projetService.GetPrerequisPourPhase(tache.MetierId, phaseContexte);
                if (!prerequisMetier.Any()) return suggestions;

                // Identifier les m√©tiers pr√©sents parmi les candidats valides
                var metiersPresentsParmi = candidatsValides
                    .Where(t => !string.IsNullOrEmpty(t.MetierId))
                    .GroupBy(t => t.MetierId)
                    .ToDictionary(g => g.Key, g => g.ToList());

                // Obtenir les exclusions de la t√¢che cible
                var exclusions = ParseDependances(tache.ExclusionsDependances);

                // Pour chaque pr√©requis m√©tier, trouver les meilleures t√¢ches √† sugg√©rer
                foreach (var prerequisId in prerequisMetier)
                {
                    if (metiersPresentsParmi.ContainsKey(prerequisId))
                    {
                        var tachesDuPrerequis = metiersPresentsParmi[prerequisId];
                        // Filtrer les t√¢ches exclues avant de chercher les meilleures
                        var tachesDuPrerequisNonExclues = tachesDuPrerequis
                            .Where(t => !exclusions.Contains(t.TacheId))
                            .ToList();
                        var meilleuresTaches = TrouverMeilleuresTachesPourSuggestion(tachesDuPrerequisNonExclues, candidatsValides);
                        suggestions.UnionWith(meilleuresTaches.Select(t => t.TacheId));
                    }
                    else
                    {
                        // Remont√©e de cha√Æne : chercher des pr√©requis plus en amont
                        var prerequisIndirects = RemonterChainePrerequis(prerequisId, metiersPresentsParmi.Keys.ToHashSet(), phaseContexte);
                        foreach (var prerequisIndirect in prerequisIndirects)
                        {
                            if (metiersPresentsParmi.ContainsKey(prerequisIndirect))
                            {
                                var tachesDuPrerequis = metiersPresentsParmi[prerequisIndirect];
                                // Filtrer les t√¢ches exclues avant de chercher les meilleures
                                var tachesDuPrerequisNonExclues = tachesDuPrerequis
                                    .Where(t => !exclusions.Contains(t.TacheId))
                                    .ToList();
                                var meilleuresTaches = TrouverMeilleuresTachesPourSuggestion(tachesDuPrerequisNonExclues, candidatsValides);
                                suggestions.UnionWith(meilleuresTaches.Select(t => t.TacheId));
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                // En cas d'erreur dans la logique m√©tier, continuer sans suggestions
            }

            return suggestions;
        }
        /// <summary>
        ///  relocated from ProjetService V0.4.2.1
        /// Obtient la liste compl√®te et transitive de tous les pr√©requis pour un m√©tier donn√©.
        /// </summary>
        public HashSet<string> GetTransitivePrerequisites(string metierId)
        {
            var allPrereqs = new HashSet<string>();
            // On utilise la nouvelle m√©thode explicite de ProjetService
            var toExplore = new Queue<string>(_projetService.GetTousPrerequisConfondus(metierId));

            while (toExplore.Count > 0)
            {
                var current = toExplore.Dequeue();
                if (allPrereqs.Add(current)) // Si on l'ajoute (il n'y √©tait pas d√©j√†)
                {
                    var parents = _projetService.GetTousPrerequisConfondus(current);
                    foreach (var parent in parents)
                    {
                        toExplore.Enqueue(parent);
                    }
                }
            }
            return allPrereqs;
        }

        /// <summary>
        /// relocated from ProjetService V0.4.2.1
        /// Retourne la liste des m√©tiers ordonn√©e selon leurs d√©pendances (tri topologique).
        /// </summary>
        /// <returns>Une liste ordonn√©e de m√©tiers.</returns>
        public List<Metier> ObtenirMetiersTriesParDependance()
        {
            var graph = new AdjacencyGraph<string, Edge<string>>();
            var metiersCollection = _projetService.GetAllMetiers();

            graph.AddVertexRange(metiersCollection.Select(m => m.MetierId));

            foreach (var metier in metiersCollection)
            {
                // On utilise la nouvelle m√©thode explicite pour construire le graphe complet
                var prerequis = _projetService.GetTousPrerequisConfondus(metier.MetierId);
                foreach (var prerequisId in prerequis)
                {
                    if (metiersCollection.Any(m => m.MetierId == prerequisId))
                    {
                        graph.AddEdge(new Edge<string>(prerequisId, metier.MetierId));
                    }
                }
            }

            try
            {
                var sortedIds = graph.TopologicalSort().ToList();
                return sortedIds.Select(id => _projetService.GetMetierById(id)).ToList();
            }
            catch (NonAcyclicGraphException)
            {
                return metiersCollection.OrderBy(m => m.Nom).ToList();
            }
        }


        /// <summary>
        /// Trouve les meilleures t√¢ches √† sugg√©rer pour un m√©tier donn√©.
        /// 
        /// PRIORIT√âS :
        /// 1. Privil√©gier les jalons s'ils existent
        /// 2. Sinon, sugg√©rer les "fins de cha√Æne" (t√¢ches sans successeur dans le m√©tier)
        /// 3. En dernier recours, sugg√©rer toutes les t√¢ches du m√©tier
        /// </summary>
        private List<Tache> TrouverMeilleuresTachesPourSuggestion(List<Tache> tachesDuMetier, List<Tache> toutesLesTaches)
        {
            // 1. Chercher les jalons qui d√©pendent des t√¢ches de ce m√©tier
            var jalonsSuccesseurs = toutesLesTaches
                .Where(t => t.EstJalon)
                .Where(jalon =>
                {
                    var dependancesJalon = ParseDependances(jalon.Dependencies);
                    return tachesDuMetier.Any(tm => dependancesJalon.Contains(tm.TacheId));
                })
                .ToList();

            if (jalonsSuccesseurs.Any())
            {
                return jalonsSuccesseurs; // Privil√©gier les jalons
            }

            // 2. Sinon, chercher les fins de cha√Æne du m√©tier
            var finsDeChaine = TrouverFinsDeChaineDuMetier(tachesDuMetier);
            if (finsDeChaine.Any())
            {
                return finsDeChaine;
            }

            // 3. En dernier recours, toutes les t√¢ches du m√©tier
            return tachesDuMetier;
        }

        /// <summary>
        /// Trouve les fins de cha√Æne d'un m√©tier : t√¢ches sans successeur du m√™me m√©tier.
        /// 
        /// ALGORITHME SIMPLIFI√â :
        /// Une t√¢che est une "fin de cha√Æne" si aucune autre t√¢che du m√™me m√©tier ne d√©pend d'elle.
        /// </summary>
        private List<Tache> TrouverFinsDeChaineDuMetier(List<Tache> tachesDuMetier)
        {
            var finsDeChaine = new List<Tache>();

            foreach (var tache in tachesDuMetier)
            {
                // V√©rifier si une autre t√¢che du m√™me m√©tier d√©pend de cette t√¢che
                bool aSuccesseurDansMemeMetier = tachesDuMetier.Any(autreTache =>
                {
                    if (autreTache.TacheId == tache.TacheId) return false;
                    var dependances = ParseDependances(autreTache.Dependencies);
                    return dependances.Contains(tache.TacheId);
                });

                if (!aSuccesseurDansMemeMetier)
                {
                    finsDeChaine.Add(tache);
                }
            }

            return finsDeChaine.Any() ? finsDeChaine : tachesDuMetier;
        }

        /// <summary>
        /// Remonte la cha√Æne des pr√©requis m√©tier pour trouver des m√©tiers pr√©sents.
        /// 
        /// APPLICATION DE LA R√àGLE 3 :
        /// Si un m√©tier pr√©requis direct n'est pas pr√©sent, chercher ses pr√©requis
        /// jusqu'√† trouver des m√©tiers effectivement pr√©sents dans le bloc.
        /// </summary>
        private HashSet<string> RemonterChainePrerequis(string metierId, HashSet<string> metiersPresents, ChantierPhase phaseContexte)
        {
            var prerequisTrouves = new HashSet<string>();
            var visite = new HashSet<string>();
            var aExplorer = new Queue<string>();

            aExplorer.Enqueue(metierId);

            while (aExplorer.Count > 0)
            {
                var metierCourant = aExplorer.Dequeue();
                if (visite.Contains(metierCourant)) continue;
                visite.Add(metierCourant);

                try
                {
                    // Changement ici : _projetService.GetPrerequisForMetier
                    var prerequisDirects = _projetService.GetPrerequisPourPhase(metierCourant, phaseContexte);
                    foreach (var prerequis in prerequisDirects)
                    {
                        if (metiersPresents.Contains(prerequis))
                        {
                            prerequisTrouves.Add(prerequis);
                        }
                        else
                        {
                            aExplorer.Enqueue(prerequis);
                        }
                    }
                }
                catch (Exception)
                {
                    // Ignorer les erreurs de m√©tier et continuer
                }
            }

            return prerequisTrouves;
        }

        /// <summary>
        /// Parse une cha√Æne de d√©pendances au format CSV en ensemble d'IDs.
        /// </summary>
        private HashSet<string> ParseDependances(string dependancesStr)
        {
            if (string.IsNullOrWhiteSpace(dependancesStr))
                return new HashSet<string>();

            return dependancesStr
                .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(id => id.Trim())
                .Where(id => !string.IsNullOrWhiteSpace(id))
                .ToHashSet();
        }

        /// <summary>
        /// Classifie les candidats selon leur √©tat de d√©pendance.
        /// </summary>
        private List<DependanceAffichage> ClassifierDependances(
            List<Tache> candidatsValides,
            HashSet<string> strictes,
            HashSet<string> excluses,
            HashSet<string> suggestions)
        {
            var resultats = new List<DependanceAffichage>();

            foreach (var candidat in candidatsValides)
            {
                EtatDependance etat;
                bool estHeritee;

                if (strictes.Contains(candidat.TacheId))
                {
                    etat = EtatDependance.Stricte;
                    estHeritee = false;
                }
                else if (excluses.Contains(candidat.TacheId))
                {
                    etat = EtatDependance.Exclue;
                    estHeritee = true;
                }
                else if (suggestions.Contains(candidat.TacheId))
                {
                    etat = EtatDependance.Suggeree;
                    estHeritee = true;
                }
                else
                {
                    etat = EtatDependance.Neutre;
                    estHeritee = false;
                }

                resultats.Add(new DependanceAffichage
                {
                    TachePredecesseur = candidat,
                    Etat = etat,
                    EstHeritee = estHeritee
                });
            }

            return resultats.OrderBy(d => d.TachePredecesseur.TacheNom).ToList();
        }
    }
}