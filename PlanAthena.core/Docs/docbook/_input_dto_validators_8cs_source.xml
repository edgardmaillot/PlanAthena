<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__input_dto_validators_8cs_source" xml:lang="en-US">
<title>InputDtoValidators.cs</title>
<indexterm><primary>Application/Validation/InputDtoValidators.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__input_dto_validators_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;PlanAthena.Core.Application.Validation.InputDtoValidators.cs</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>System;
<anchor xml:id="__input_dto_validators_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__input_dto_validators_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis>System.Linq;
<anchor xml:id="__input_dto_validators_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis>FluentValidation;&#32;<emphasis role="comment">//&#32;Assurez-vous&#32;que&#32;le&#32;NuGet&#32;FluentValidation&#32;est&#32;installé</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_plan_athena_1_1_core_1_1_facade_1_1_dto_1_1_input">PlanAthena.Core.Facade.Dto.Input</link>;
<anchor xml:id="__input_dto_validators_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_plan_athena_1_1_core_1_1_facade_1_1_dto_1_1_enums">PlanAthena.Core.Facade.Dto.Enums</link>;&#32;<emphasis role="comment">//&#32;Pour&#32;les&#32;enums</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00008"/>00008 
<anchor xml:id="__input_dto_validators_8cs_source_1l00009"/><link linkend="_namespace_plan_athena_1_1_core_1_1_application_1_1_validation">00009</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_plan_athena_1_1_core_1_1_application_1_1_validation">PlanAthena.Core.Application.Validation</link>
<anchor xml:id="__input_dto_validators_8cs_source_1l00010"/>00010 {
<anchor xml:id="__input_dto_validators_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;---&#32;Validateur&#32;Principal&#32;---</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00012"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_chantier_setup_input_dto_validator">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_chantier_setup_input_dto_validator_1a895c7cb12e9344897ccf9e9e9162c284">ChantierSetupInputDtoValidator</link>&#32;:&#32;AbstractValidator&lt;ChantierSetupInputDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00014"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_chantier_setup_input_dto_validator_1a895c7cb12e9344897ccf9e9e9162c284">00014</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_chantier_setup_input_dto_validator_1a895c7cb12e9344897ccf9e9e9162c284">ChantierSetupInputDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.ChantierId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Description).NotEmpty().MaximumLength(1000);
<anchor xml:id="__input_dto_validators_8cs_source_1l00018"/>00018 
<anchor xml:id="__input_dto_validators_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x)
<anchor xml:id="__input_dto_validators_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveDateCoherence)
<anchor xml:id="__input_dto_validators_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;La&#32;date&#32;de&#32;début&#32;souhaitée&#32;doit&#32;être&#32;antérieure&#32;ou&#32;égale&#32;à&#32;la&#32;date&#32;de&#32;fin&#32;souhaitée.&quot;</emphasis>)
<anchor xml:id="__input_dto_validators_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.When(x&#32;=&gt;&#32;x.DateDebutSouhaitee.HasValue&#32;&amp;&amp;&#32;x.DateFinSouhaitee.HasValue);
<anchor xml:id="__input_dto_validators_8cs_source_1l00023"/>00023 
<anchor xml:id="__input_dto_validators_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.FlexibiliteDebut).IsInEnum();
<anchor xml:id="__input_dto_validators_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.FlexibiliteFin).IsInEnum();
<anchor xml:id="__input_dto_validators_8cs_source_1l00026"/>00026 
<anchor xml:id="__input_dto_validators_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.CalendrierTravail).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_calendrier_travail_definition_dto_validator">CalendrierTravailDefinitionDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00028"/>00028 
<anchor xml:id="__input_dto_validators_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Blocs).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;un&#32;bloc&#32;doit&#32;être&#32;défini.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Blocs).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_bloc_travail_dto_validator">BlocTravailDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Blocs).Must(HaveUniqueBlocIds).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;BlocId&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00032"/>00032 
<anchor xml:id="__input_dto_validators_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Taches).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;une&#32;tâche&#32;doit&#32;être&#32;définie.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Taches).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_tache_dto_validator">TacheDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Taches).Must(HaveUniqueTacheIds).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;TacheId&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00036"/>00036 
<anchor xml:id="__input_dto_validators_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Lots).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;un&#32;lot&#32;doit&#32;être&#32;défini.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Lots).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_lot_travaux_dto_validator">LotTravauxDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Lots).Must(HaveUniqueLotIds).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;LotId&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00040"/>00040 
<anchor xml:id="__input_dto_validators_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Ouvriers).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;un&#32;ouvrier&#32;doit&#32;être&#32;défini.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Ouvriers).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_ouvrier_dto_validator">OuvrierDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Ouvriers).Must(HaveUniqueOuvrierIds).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;OuvrierId&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00044"/>00044 
<anchor xml:id="__input_dto_validators_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Metiers).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;un&#32;métier&#32;doit&#32;être&#32;défini.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Metiers).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_metier_dto_validator">MetierDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Metiers).Must(HaveUniqueMetierIds).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;MetierId&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00048"/>00048 
<anchor xml:id="__input_dto_validators_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;When(x&#32;=&gt;&#32;x.ConfigurationCdC&#32;!=&#32;<emphasis role="keyword">null</emphasis>,&#32;()&#32;=&gt;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.ConfigurationCdC!).SetValidator(new&#32;ConfigurationChefChantierDtoValidator());
<anchor xml:id="__input_dto_validators_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__input_dto_validators_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00053"/>00053 
<anchor xml:id="__input_dto_validators_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveDateCoherence(<link linkend="_namespace_plan_athena_1_1_core_1_1_facade_1_1_dto_1_1_input_1aa28aa6f3847c63941514c75931fabaf3">ChantierSetupInputDto</link>&#32;dto)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dto.DateDebutSouhaitee!.Value&#32;&lt;=&#32;dto.DateFinSouhaitee!.Value;
<anchor xml:id="__input_dto_validators_8cs_source_1l00056"/>00056 
<anchor xml:id="__input_dto_validators_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueBlocIds(IReadOnlyList&lt;BlocTravailDto&gt;&#32;blocs)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blocs.Select(b&#32;=&gt;&#32;b.BlocId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;blocs.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00059"/>00059 
<anchor xml:id="__input_dto_validators_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueTacheIds(IReadOnlyList&lt;TacheDto&gt;&#32;taches)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;taches.Select(t&#32;=&gt;&#32;t.TacheId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;taches.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00062"/>00062 
<anchor xml:id="__input_dto_validators_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueLotIds(IReadOnlyList&lt;LotTravauxDto&gt;&#32;lots)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lots.Select(l&#32;=&gt;&#32;l.LotId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;lots.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00065"/>00065 
<anchor xml:id="__input_dto_validators_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueOuvrierIds(IReadOnlyList&lt;OuvrierDto&gt;&#32;ouvriers)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ouvriers.Select(o&#32;=&gt;&#32;o.OuvrierId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;ouvriers.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00068"/>00068 
<anchor xml:id="__input_dto_validators_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueMetierIds(IReadOnlyList&lt;MetierDto&gt;&#32;metiers)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metiers.Select(m&#32;=&gt;&#32;m.MetierId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;metiers.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00072"/>00072 
<anchor xml:id="__input_dto_validators_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;---&#32;Validateurs&#32;pour&#32;DTOs&#32;Imbriqués&#32;---</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00074"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_calendrier_travail_definition_dto_validator">00074</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_calendrier_travail_definition_dto_validator_1adc4aa4d9f254527a361c3f1496393fc2">CalendrierTravailDefinitionDtoValidator</link>&#32;:&#32;AbstractValidator&lt;CalendrierTravailDefinitionDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00076"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_calendrier_travail_definition_dto_validator_1adc4aa4d9f254527a361c3f1496393fc2">00076</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_calendrier_travail_definition_dto_validator_1adc4aa4d9f254527a361c3f1496393fc2">CalendrierTravailDefinitionDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.JoursOuvres).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Au&#32;moins&#32;un&#32;jour&#32;ouvré&#32;doit&#32;être&#32;spécifié.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.JoursOuvres).IsInEnum();
<anchor xml:id="__input_dto_validators_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.JoursOuvres)
<anchor xml:id="__input_dto_validators_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(jours&#32;=&gt;&#32;jours.Distinct().Count()&#32;==&#32;jours.Count)
<anchor xml:id="__input_dto_validators_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Les&#32;jours&#32;ouvrés&#32;ne&#32;doivent&#32;pas&#32;contenir&#32;de&#32;doublons.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00083"/>00083 
<anchor xml:id="__input_dto_validators_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.HeureDebutJournee).InclusiveBetween(0,&#32;23);
<anchor xml:id="__input_dto_validators_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.HeuresTravailEffectifParJour).GreaterThan(0).LessThanOrEqualTo(24);
<anchor xml:id="__input_dto_validators_8cs_source_1l00086"/>00086 
<anchor xml:id="__input_dto_validators_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JoursChomes&#32;:&#32;chaque&#32;date&#32;doit&#32;être&#32;valide,&#32;pas&#32;de&#32;validation&#32;de&#32;doublons&#32;pour&#32;l&apos;instant&#32;(HashSet&#32;dans&#32;VO&#32;s&apos;en&#32;charge)</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00090"/>00090 
<anchor xml:id="__input_dto_validators_8cs_source_1l00091"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_bloc_travail_dto_validator">00091</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_bloc_travail_dto_validator_1a9083d1d5e7d1af213d1ff4f96652e89c">BlocTravailDtoValidator</link>&#32;:&#32;AbstractValidator&lt;BlocTravailDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00093"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_bloc_travail_dto_validator_1a9083d1d5e7d1af213d1ff4f96652e89c">00093</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_bloc_travail_dto_validator_1a9083d1d5e7d1af213d1ff4f96652e89c">BlocTravailDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.BlocId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Nom).NotEmpty().MaximumLength(200);
<anchor xml:id="__input_dto_validators_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.CapaciteMaxOuvriers).GreaterThan(0);
<anchor xml:id="__input_dto_validators_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00100"/>00100 
<anchor xml:id="__input_dto_validators_8cs_source_1l00101"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_tache_dto_validator">00101</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_tache_dto_validator_1a2eb6662320fc14babacc54d4e6472bd6">TacheDtoValidator</link>&#32;:&#32;AbstractValidator&lt;TacheDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00103"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_tache_dto_validator_1a2eb6662320fc14babacc54d4e6472bd6">00103</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_tache_dto_validator_1a2eb6662320fc14babacc54d4e6472bd6">TacheDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.TacheId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Nom).NotEmpty().MaximumLength(250);
<anchor xml:id="__input_dto_validators_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.BlocId).NotEmpty();
<anchor xml:id="__input_dto_validators_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.HeuresHommeEstimees).GreaterThanOrEqualTo(0);
<anchor xml:id="__input_dto_validators_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.MetierId).NotEmpty();
<anchor xml:id="__input_dto_validators_8cs_source_1l00110"/>00110 
<anchor xml:id="__input_dto_validators_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Dependencies)
<anchor xml:id="__input_dto_validators_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must((tache,&#32;deps)&#32;=&gt;&#32;NotContainSelfReference(tache.TacheId,&#32;deps))
<anchor xml:id="__input_dto_validators_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Une&#32;tâche&#32;ne&#32;peut&#32;pas&#32;dépendre&#32;d&apos;elle-même.&quot;</emphasis>)
<anchor xml:id="__input_dto_validators_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveUniqueValues)
<anchor xml:id="__input_dto_validators_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Les&#32;dépendances&#32;de&#32;tâches&#32;doivent&#32;être&#32;uniques&#32;pour&#32;une&#32;même&#32;tâche.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;NotContainSelfReference(<emphasis role="keywordtype">string</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;IReadOnlyList&lt;string&gt;&#32;dependancyIds)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!dependancyIds.Contains(<emphasis role="keywordtype">id</emphasis>,&#32;StringComparer.OrdinalIgnoreCase);
<anchor xml:id="__input_dto_validators_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueValues(IReadOnlyList&lt;string&gt;&#32;values)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;values.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00122"/>00122 
<anchor xml:id="__input_dto_validators_8cs_source_1l00123"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_lot_travaux_dto_validator">00123</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_lot_travaux_dto_validator_1a0d414401f20c2be08d98a155001ae26b">LotTravauxDtoValidator</link>&#32;:&#32;AbstractValidator&lt;LotTravauxDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00125"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_lot_travaux_dto_validator_1a0d414401f20c2be08d98a155001ae26b">00125</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_lot_travaux_dto_validator_1a0d414401f20c2be08d98a155001ae26b">LotTravauxDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.LotId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Nom).NotEmpty().MaximumLength(200);
<anchor xml:id="__input_dto_validators_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.BlocIds).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Un&#32;lot&#32;doit&#32;contenir&#32;au&#32;moins&#32;un&#32;BlocId.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.BlocIds).Must(HaveUniqueValues).WithMessage(<emphasis role="stringliteral">&quot;Les&#32;BlocId&#32;au&#32;sein&#32;d&apos;un&#32;lot&#32;doivent&#32;être&#32;uniques.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Priorite).GreaterThan(0);
<anchor xml:id="__input_dto_validators_8cs_source_1l00132"/>00132 
<anchor xml:id="__input_dto_validators_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;When(x&#32;=&gt;&#32;x.DateDebutAuPlusTotSouhaitee.HasValue&#32;&amp;&amp;&#32;x.DateFinAuPlusTardSouhaitee.HasValue,&#32;()&#32;=&gt;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x)
<anchor xml:id="__input_dto_validators_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(lot&#32;=&gt;&#32;lot.DateDebutAuPlusTotSouhaitee!.Value&#32;&lt;=&#32;lot.DateFinAuPlusTardSouhaitee!.Value)
<anchor xml:id="__input_dto_validators_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;La&#32;date&#32;de&#32;début&#32;souhaitée&#32;du&#32;lot&#32;doit&#32;être&#32;antérieure&#32;ou&#32;égale&#32;à&#32;sa&#32;date&#32;de&#32;fin&#32;souhaitée.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__input_dto_validators_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueValues(IReadOnlyList&lt;string&gt;&#32;values)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;values.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00142"/>00142 
<anchor xml:id="__input_dto_validators_8cs_source_1l00143"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_competence_dto_validator">00143</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_competence_dto_validator_1a97df56a0d022524670638e479903b77b">CompetenceDtoValidator</link>&#32;:&#32;AbstractValidator&lt;CompetenceDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00145"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_competence_dto_validator_1a97df56a0d022524670638e479903b77b">00145</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_competence_dto_validator_1a97df56a0d022524670638e479903b77b">CompetenceDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.MetierId).NotEmpty();
<anchor xml:id="__input_dto_validators_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Niveau).IsInEnum();
<anchor xml:id="__input_dto_validators_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;When(x&#32;=&gt;&#32;x.PerformancePct.HasValue,&#32;()&#32;=&gt;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.PerformancePct!.Value).GreaterThan(0);&#32;<emphasis role="comment">//&#32;Ex:&#32;10,&#32;50,&#32;100,&#32;120,&#32;200</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__input_dto_validators_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00154"/>00154 
<anchor xml:id="__input_dto_validators_8cs_source_1l00155"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_ouvrier_dto_validator">00155</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_ouvrier_dto_validator_1a20442df4648ab9371fe7d9e20bfd8325">OuvrierDtoValidator</link>&#32;:&#32;AbstractValidator&lt;OuvrierDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00157"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_ouvrier_dto_validator_1a20442df4648ab9371fe7d9e20bfd8325">00157</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_ouvrier_dto_validator_1a20442df4648ab9371fe7d9e20bfd8325">OuvrierDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.OuvrierId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Nom).NotEmpty().MaximumLength(100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Prenom).NotEmpty().MaximumLength(100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.CoutJournalier).GreaterThanOrEqualTo(0);&#32;<emphasis role="comment">//&#32;Un&#32;coût&#32;de&#32;0&#32;est&#32;possible&#32;(bénévole?)&#32;mais&#32;typiquement&#32;&gt;0</emphasis>
<anchor xml:id="__input_dto_validators_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Competences).NotEmpty().WithMessage(<emphasis role="stringliteral">&quot;Un&#32;ouvrier&#32;doit&#32;avoir&#32;au&#32;moins&#32;une&#32;compétence.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleForEach(x&#32;=&gt;&#32;x.Competences).NotNull().SetValidator(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_competence_dto_validator">CompetenceDtoValidator</link>());
<anchor xml:id="__input_dto_validators_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Competences)
<anchor xml:id="__input_dto_validators_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveUniqueMetiersInCompetences)
<anchor xml:id="__input_dto_validators_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Un&#32;ouvrier&#32;ne&#32;peut&#32;pas&#32;avoir&#32;plusieurs&#32;définitions&#32;de&#32;compétence&#32;pour&#32;le&#32;même&#32;métier.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueMetiersInCompetences(IReadOnlyList&lt;CompetenceDto&gt;&#32;competences)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;competences.Select(c&#32;=&gt;&#32;c.MetierId).Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;competences.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00172"/>00172 
<anchor xml:id="__input_dto_validators_8cs_source_1l00173"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_metier_dto_validator">00173</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_metier_dto_validator_1a831ed69f12d51e455f492b3ef910bea0">MetierDtoValidator</link>&#32;:&#32;AbstractValidator&lt;MetierDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00175"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_metier_dto_validator_1a831ed69f12d51e455f492b3ef910bea0">00175</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_metier_dto_validator_1a831ed69f12d51e455f492b3ef910bea0">MetierDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.MetierId).NotEmpty().Length(1,&#32;100);
<anchor xml:id="__input_dto_validators_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.Nom).NotEmpty().MaximumLength(200);
<anchor xml:id="__input_dto_validators_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.PrerequisMetierIds)
<anchor xml:id="__input_dto_validators_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must((metier,&#32;prereqs)&#32;=&gt;&#32;NotContainSelfReference(metier.MetierId,&#32;prereqs))
<anchor xml:id="__input_dto_validators_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Un&#32;métier&#32;ne&#32;peut&#32;pas&#32;être&#32;son&#32;propre&#32;prérequis.&quot;</emphasis>)
<anchor xml:id="__input_dto_validators_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveUniqueValues)
<anchor xml:id="__input_dto_validators_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;Les&#32;prérequis&#32;métier&#32;doivent&#32;être&#32;uniques&#32;pour&#32;un&#32;même&#32;métier.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;NotContainSelfReference(<emphasis role="keywordtype">string</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;IReadOnlyList&lt;string&gt;&#32;dependancyIds)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!dependancyIds.Contains(<emphasis role="keywordtype">id</emphasis>,&#32;StringComparer.OrdinalIgnoreCase);
<anchor xml:id="__input_dto_validators_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueValues(IReadOnlyList&lt;string&gt;&#32;values)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;values.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00190"/>00190 
<anchor xml:id="__input_dto_validators_8cs_source_1l00191"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_configuration_chef_chantier_dto_validator">00191</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_configuration_chef_chantier_dto_validator_1a883d4fdc75a8a5ff484a3881c74a92ec">ConfigurationChefChantierDtoValidator</link>&#32;:&#32;AbstractValidator&lt;ConfigurationChefChantierDto&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00193"/><link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_configuration_chef_chantier_dto_validator_1a883d4fdc75a8a5ff484a3881c74a92ec">00193</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_plan_athena_1_1_core_1_1_application_1_1_validation_1_1_configuration_chef_chantier_dto_validator_1a883d4fdc75a8a5ff484a3881c74a92ec">ConfigurationChefChantierDtoValidator</link>()
<anchor xml:id="__input_dto_validators_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__input_dto_validators_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.OuvriersClefsIds)
<anchor xml:id="__input_dto_validators_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveUniqueValues)
<anchor xml:id="__input_dto_validators_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;La&#32;liste&#32;des&#32;OuvriersClefsIds&#32;ne&#32;doit&#32;pas&#32;contenir&#32;de&#32;doublons.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RuleFor(x&#32;=&gt;&#32;x.MetiersClefsIds)
<anchor xml:id="__input_dto_validators_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Must(HaveUniqueValues)
<anchor xml:id="__input_dto_validators_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.WithMessage(<emphasis role="stringliteral">&quot;La&#32;liste&#32;des&#32;MetiersClefsIds&#32;ne&#32;doit&#32;pas&#32;contenir&#32;de&#32;doublons.&quot;</emphasis>);
<anchor xml:id="__input_dto_validators_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HaveUniqueValues(IReadOnlyList&lt;string&gt;&#32;values)&#32;=&gt;
<anchor xml:id="__input_dto_validators_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Distinct(StringComparer.OrdinalIgnoreCase).Count()&#32;==&#32;values.Count;
<anchor xml:id="__input_dto_validators_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="__input_dto_validators_8cs_source_1l00205"/>00205 }
</programlisting></section>
